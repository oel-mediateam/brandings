%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.1%%For: (marla norton) ()%%Title: (BSSM_MainLogo_2C_NoBlend.ai)%%CreationDate: 4/29/09 1:46 PM%%BoundingBox: 258 163 383 314%%HiResBoundingBox: 258.5825 163.498 382.6094 313.5996%%DocumentProcessColors:%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%DocumentCustomColors: (PANTONE 546 C)%%+ (PANTONE 576 C)%%CMYKCustomColor: 0.95 0.09 0 0.83 (PANTONE 546 C)%%+ 0.490005 0 1 0.389999 (PANTONE 576 C)%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_Cropmarks: 0 0 640 480%AI3_TemplateBox: 320 240 320 240%AI3_TileBox: -76 -66 716 546%AI3_DocumentPreview: None%AI5_ArtSize: 480 640%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -41.5 480.5 2.37 1716 1152 18 0 0 6 42 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-146.3003 -326.2988%AI7_GridSettings: 72 16 72 16 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 108 128 8%%BeginData: 15710 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2EFFA959590C0C050605060506050C065959A9FD58FF842E0600%05F80500050005000500050005040B05062EA8FD53FF590C0505050C2D2D%FD04050006FD05052D2C572D0B050C59FD4FFF59050500052D512C572C2D%050B05050005000B050B050505572C2D00050559FD4BFF7E0C00052D5757%572C572D572C5751572D2E050C052D2D2D0506055757570505002E84FD48%FF2E05F8052D57050505572C572C512C572C572C572C57050505572C0505%2D502D0005F8052FFD45FFA9FD05050C0505000C51572C572D572C572D57%2C572D050006052D0505052D05060505000506AFFD42FF7E000500050005%0005000505572C2D2C512C2D2C512C2D2C2D0005000B052D050500050005%000500050584FD40FF5A0505050605060506050605062D572C572D572C57%2D572C572D0C00052D572D572D0600060506050605050584FD3EFF590005%00050005000500050005002D2C512C572C512C572C512C572C2D002D2C51%2C572D0500050005000500050084FD3CFF84050505060505050605050506%0505052D2D572C572D572C572D572C57512D2D572D572C572D0500060505%0506050505A8FD3AFF840005000500050005000500050005000505572C2D%2C512C2D2C512C2D2C512C512C512C512C050505000500050005000505AF%FD39FF05050506050605060506050605060505052D51572C572D572C572D%572C572D572C572D572C5705062D06050605060506050506FD38FF0C0500%0500050005000500050005000500052C572C512C572C512C572C512C572C%512C572C2D2C2D0005000500050005000500052FFD36FF59FD0405060505%050605050506FD0505572C572D572C572D572C572D572C572D572C572D2D%FD050506050505060505000684FD35FF06F8050005000500050005000500%05000500052C2D2C512C2D2C512C2D2C512C2D2C512C2D2C570505000500%050005000500050005F80CFD34FF59000605060506050605060506050605%06050505572C572D572C572D572C572D572C572D572C572D060506050605%060506050605060506057EFD33FF05050005000500050005000500050005%0005000B2C512C572C512C572C512C572C512C572C512C2D000500050005%0005000500050005000506FD32FF53FD0405060505050605050506050505%06050505572D572C572D572C572D572C572D572C572D57FD050506050505%0605050506050500055AFD31FF06F8050005000500050005000500050005%0005000505572C512C512C2D2C512C2D2C512C2D2C572D05000500050005%00050005000500050005F82EFD30FF840506050605060506050605060506%05060506050605062D572D572D572C572D572C5751572C572D0605060506%050605060506050605060506050605A9FD2FFF2E05000500050005000500%0500050005000500050005002D2C052C572C512C572C2D052D2D512C2D00%050005000500050005000500050005000500052FFD2FFF0C050505060505%0506050505060505050605050506050505570B0C2C572D572C2D05050006%052D2DFD0405060505050605050506050505060505002FFD2EFF84000500%0500050005000500050005000500050005000500050551052D2C512C5105%0500050005002D000500050005000500050005000500050005000500FD2E%FF5905050605060506050605060506050605060506050605060505050C05%572D572D0605060506050C05060506050605060506050605060506050605%06050684FD2DFF2FF8050005000500050005000500050005000500050005%0005000505052D572C2D000500050005052D2C0500050505000500050005%00050005000500050059FD2DFF0C05050605050506050505060505050605%0505060505050605050006050B2C57512D00062D2D0005050C05050551FD%050506050505060505050605052EFD2DFF0C000500050005000500050005%0005000500050005000500050005000505512C572C2D2C572C0500050005%000500050005000500050005000500050005002EFD2DFF06050506050605%0605060506050605060506050605060506050605060505055751572D572D%572D0C0506050605050506050605060506050605060506050506FD2CFFA8%060005000500050005000500050005000500050005000500050005000500%05002D2C572C572C572C0500050005000500050005000500050005000500%050006FD2DFFFD0505060505050605050506050505060505050605050506%05050506050500062D512C572D57FD040500050505000605050506050505%06FD040506FD2CFFA805000500050005000500050000F805F80500050005%0005000500050005000500050005000505512C2D05050005052D05050005%000500050005000500050006FD2DFF05050506050605050005062F2F592F%2F06060505000605060506050605060506050605050005052D2D572D2D2D%5757572D5705050506050605060506050506FD2DFF060005000500050006%59FFFFFFCFFD04FF842F0600050005000500050005000500050005000500%052C572C572C572C572C5705050005000500050005002EFD2DFF06050506%0505057EFFCF585851572D585783A7FFFF84060500050506050505060505%0506050505060505050C2D572C572D572C572D0600060505050605052EFD%2DFF2FF805000505A9A7572C2D2C512C2D2C2D2C2D2C7CA7FF7E2F000500%050005000500050005000500050005002D2C2D2C512C2D2C572C05000500%05000505AFFD2DFF530505050CFF7C572D572C572D572C572D572C572D57%57ADFFA90CFD04050605060506050605060506002E51572C572D572C572D%5705050506050506AECFFD2DFF84000506FF572D2C572C512C572C512C57%2C512C572C2D2C57A7FF7E0C00050005000500050005000500052C572C51%2C572C512C572C51050500052EFF57AEFD2DFFA80605FF7C572D572C572D%572C572D572C572D572C572D572C5757ADFF84060500FD040506FD04050B%572C572D572C572D572C572D57050659FF5157FD2FFF0559A72D2C2D2C2D%2C512C2D2C512C2D2C512C2D2C512C2D2C2D2C57A7FF7E0C000500050005%000500512C2D2C512C2D2C512C2D2C2D2C52A8CF2C2D57FD2FFF7E84A757%7C57572D572D572C572D572C572D572C572D572C572D572C5757CFFFFF53%0C05050005000C51572C572D572C572D572C5757A8FFA72D572CA7FD2FFF%A8FD07FF837C2D2D2C572C512C572C512C572C512C572C512C512C577CFF%FFA9532F050505572C2D2C2D2C2D2C57517CA8FFA8572C572C57A8FD32FF%A8A883CFFD04FF83572C572D572C572D572C572D572C572D572C572D512D%82A7FFFFFFAF847C837C837C837DA8FFFFFFA857572D572C5758FD2FFFAE%7C572C572C2D2C57517CA7FFFF832C2D2C2D2C512C2D2C512C2D2C512C2D%2C512C2D2C2D2C5758A7A8FD07FFA88357572C2D2C512C2D2CA8FD27FF57%83A8FFA8A75857577C837C2D572C572D572C5757A7FFFF7C572C572D572C%572D572C572D572C572D572C572D572C572D572DFD05572D572C572D572C%572D572C82FD26FFA72D2D2C2D2C572C577DFFFFFFA7572C512C572C512C%512C577CFFA8572C572C512C572C512C572C512C572C512C572C512C572C%2D2C512C2D2C572C2D2C572C512C572C51A8FD26FFA8A77C837C8283FD07%FF57572D572C572D572C572D5151A8FFA72C572D572C572D572C572D572C%572D572C572D572C572D572C572D572C572D572C572D572C577CFD35FFAE%2C2D2C2D2C512C2D2C512C2D2C58A8CF512D2C2D2C512C2D2C512C2D2C51%2C2D2C512C2D2C512C2D2C512C2D2C512C2D2C512C2D51FD37FFA72D572C%572D572C572D572C572D577CFF7C572C572D572C572D572C572D572C572D%572C572D572C572D5757572D572C572D572DFD39FF7C2C512C572C512C57%2C512C572C2D2CA8A7572C572C512C572C512C572C512C572C512C572C51%2C5157572C572C512C572C83FD3AFF7C2D572C572D572C572D572C572D57%2C82A8832D572D572C572D572C572D572C572D572C572D57577C2D572C57%2D572C83FD39FFA859CF572C2D2C512C2D2C512C2D2C512C2D2C577CA858%572C2D2C512C2D2C512C2D2C512C2D2C5758572C512C2D2C512C7CA8AFFD%39FF0C59FF582C572D572C572D572C572D572C572D575183A7A757572D57%2C572D572C572D5757827C572C572D572C572D82FF2FA8FD39FF59F87EFF%582C572C512C572C512C572C512C572C2D2C57578383A77C7C5758575857%827C7C2D572C512C572C2D2C7CFF0C06FD3AFFA906005AFF822C572D572C%572D572C572D572C572D572C572D5757827C837C837C7C51572D572C572D%572C572D82FF2F007EFD3BFF0600F859FFA82C2D2C2D2C512C2D2C512C2D%2C512C2D2C512C2D2C2D2C2D2C2D2C2D2C512C2D2C512C2D2CADA906F806%A8FD3BFF5A0006002FFFFF7C572C572D572C572D572C572D572C572D572C%572D572C572D572C572D572C572D5757FF840600052EFD3CFFA805000500%0659FFA8582C2D2C512C572C512C572C512C572C512C572C512C572C512C%572C2D2C57A7FF2E050005005AFD3DFF06050506050506FFFFCF57572D51%2C572D572C572D572C572D572C572D572C572D572C5757ADFF8406050006%0506A8FD3DFF59F80500050005002FA8FFA88357512C2D2C2D2C512C2D2C%512C2D2C512C2D2C512D7C83FF7E0C00050005000506FD3EFF8406050605%060506000CFD04FFA8A77C5851572D572C572D572C572D575783A8FFFFFF%2F05000605060506005AFD3FFF06050005000500050084FD08FFCFAE8383%7CA783A7A7FD07FFA9060005000500050006A8FD3FFF5900050506FD0405%2FFD08FF8484FD05FF84FD08FF84000605050506050506FD40FF7E050005%00050005F80CFD07FF2F000500050505000506FD07FF2F05000500050005%0059FD41FF060505060506050605AFFD05FF840505050605050506050559%FD06FF0C000605060506050684FD41FF2F000500050005000559FD05FF05%0500050005000500050005A8FD04FFA9050500050005000506FD42FF59FD%0405060505002FFD04FF2F0505060505050605050506002EFD04FF59FD04%050605050059FD43FF050500050005000505FFFFFF590500050005000500%05000500050059FFFFFF2EF8050005000500057EFD43FF2F000605060506%050684FFAF0C050605060506050605060506050505A9FFFF050505060506%050506FD44FF5905000500050005F859FF2EF80500050005000500050005%0005000506FF7E05000500050005002FFD45FFFD05050605050C84050505%0605050506050505060505050605055359000505060505000684FD45FF2E%F80500050005000500050005000500050005000500050005000500050505%00050005000505FD46FF5905050605060506050605060506050605060506%050605060506050605060506050605060059FD46FFA90005000500050005%0005000500050005F82F59050005000500050005000500050005000559FD%47FF0C000605050506050505060505050605057EFF050505060505050605%050506FD040506FD48FF2F05000500050005000500050005000506FFFF2F%F805000500050005000500050005F82FFD48FFA905060506050605060506%05060506057EFFFFA80605060506050605060506050605057EFD49FF0600%05000500050005000500050006FD04FF0C05000500050005000500050005%05FD4AFF2F050506050505060505050605052FFD04FF8405050506050505%0605050506002FFD4AFF8400050005000500050005000505AFFD05FF0C00%050005000500050005000559FD4BFF0C000605060506050605060059FD06%FF59050506050605060506050505FD4CFF2E050005000500050005000584%FD07FF05050005000500050005002EFD4CFF84050505060505050605050C%FD08FF590005050605050506050559FD4CFFA80600050005000500050084%FD08FFA805000500050005000505A9FD4DFF2E05050605060506052EFD0A%FF2E05050605060506052FFD4EFF7E000500050005000559FD0AFFA80005%00050005000559FD4EFFA80605050506050505FD0CFF2E00050506050505%AFFD4FFF0605000500050059FD0CFF590500050005000CFD50FF84000500%050006A9FD0DFF06050005050553FD50FFA82E060C060C2FFD0EFF7E060C%060C06A8FDFCFFFDFCFFFD94FFA8FD34FF7CAEFFFFA883FFFF7CFFFFFFAE%83FFFF7CFFA883FFFFFF83A7FF7C7C5783FFAE587C83FFFFFFA77C58CFFF%A783FF7C7C587C57A7A87CCFFFAE7CA8FD05FFAE7C577CA7FFFFFF7C7C57%A7FD20FF577CFFFFA751FFA82D57FFFFAE2DFFFF57A8FF2CA7FFAE2CAEAE%57578383FF7C577C517CFFAE577C8283FF577CFF837C57578283FF5757FF%5757FD05FFA757578357577CFFA857588383FD20FF51A7FFFF8358FFFF51%5757FFA857FFFF2DAEFF8257FF7C58FFFF57CFFFFFFF8357FF5782FFFF2D%A7FFFFFF7C58FFFFFF57A7FD04FF575757FD06FF5857FFFFFF7C57FFFF2D%AEFD22FF577CFFFFA72DFFA857A85758CF2DFFFF57A7FFA857835783FFA8%572D577CFF7C512C57CFFFFFA72C58FFFF577CFFFFFF577CFD04FFA82CAE%FD06FF2DA7FD04FF2CAEAE572C577CFD20FF51A7FFFF8358FFFF51FFCF57%577CFFFF51CFFFFF7C5757FFFFFF57AEFFFFFF8357A751AEFD04FF5182FF%8258FFFFFF57A7FD04FFA857CFFD06FF577CFFFFFFA757FFFF2DAEFD22FF%7C2CA8A75758FFA857A8FFA72D2CFFFF57A7FFFFAE2C83FFFFA85783A8A7%FF7C57FF832CFFA77CA85758FF577CFFFFFF577CFD04FFAE2DCFFD06FF83%2D7CAE83517CFFA851A7FD23FF8251577CFFFFFF58FFFFFFA77CFFFF58CF%FFFFFF83A8FFFFFF577C577CFFA77CFFFF7C83FF575757FFFF8382FFFFFF%7CA7FD04FFA882CFFD07FFA758515883FFFFFF57CFFD25FFA8FD23FFA8FD%9FFF5883FD06FF837CA7FD05FFA8827CFFFF837CFD04FFAE587C5783A8FD%06FFA8587C577C7CAEFD07FFA75857577C83FD07FF7C83FD07FFA858AEFD%04FF7C585782A8FFFFFF837CA8FFFFFF7C83FD07FFAE58A8572CA8FD05FF%572C7CFD05FF822C82FFFF2D57AEFFFFAE2D2D2C572D7CFD05FF7C2D2D2C%572D2D2C82FD04FFA8572C2D2D572C2D57AEFD04FFA8572DA7FD06FF822D%7CFFFFFF512D2D572C57FFFFFF822DCFFFFFCF572C83FD06FF832D7C832D%57FD04FFA72C2D2CAEFD04FF2D2DA8FFFF572CCFFFFF512D7CFFA87C57FF%FFFFAE572C577CA8A7A87C5751FFFFFF83512C577DAEA8A7512D2CA7FFFF%FFAE2C2D2CA7FD05FFA72CA7FFFF7D5758A87D59527E597E5959597E5984%595959AFA9FD04FFA70482FF5157AEFFFFFFFD04577CFFFFFFA72D57FFFF%FF5157AEFFFF572DFD08FF822C58FD07FFCFFFFFFF572D82FD06FF7C512D%FFFFFFCF57575751FFAFA97E845959535A59582D59595A5984597E7E582D%7D7E7E592E2E2E2D59595A59848482A7FF7C2C83FFFFA72D57FF2C57AEFF%FF7C2CA7FFFFFF572CFFFFFF512D7CFD06FFCF2C51A8FD0AFFA72C57FD08%FF572D7DA97E592E592E2E05FD05590459A8FF582D57FD07FF572DA8FFFF%FF2C577C2D2CA88484592F2E84FFA8572DFFFF7C2CA7FF7C2CA7FFCF2C57%FD04FF5757A8FFFFA82C2D57AEFD04FF832D58FD0BFF7C5782FFAFAF8484%595A53592D2E597E592D2DFF582D57FFFFFF835783FFFFFF572D2DA7FD05%FF7C2CAEFFFFA85757FF7C5751FFFFFF832D2EFFFF572D83FF2C51A8FFA7%2D51FF7C2D7CFFFFFFA8572CCFFFFFFFA82D2D2C7CFFFFFF83047CFD06FF%A9FFA88459592E592F592F5959847EA97D2D57FFFFCF2C57FFFF572D51FF%FF832C83FD04FF572D2C58A8FFFFFF572DA7FFFFCF2C57FFFF572D51FFFF%A72C82FFFFA82C82832D7CFFFFFF5757A7572DFD05FF5157A8FD05FF8257%2CA7FFFFA77C83FF84845A5A535A59595984522D58FD08FFA72D7CFFFFA8%5757FFFFFF573358FF835783FD05FF83572D58FFFFFF822CCFFFFFAE5757%FFFFFF582D57FFA72D7CFFFFFF572C572CAEFFFFFF832C572C7CFD05FF7C%57FD05FFA9FF847D597E59592E2E2F5959847EA8A8FD04FFA72C57FD08FF%572D7CFFFFCF2C57FD04FF2D2D7CA72C83FD06FFA8572CA7FFFF582DA7FF%FFCF2C57FD04FF512D58A72C82FD05FFAEFD06FFCFCFFD07FFA8A97E8459%59595A535A2E2D59A9A8582C82FD0AFFCF572D83FD06FF832D2DFFFFFFA8%5757FD04FFCF2D57572D7CFFFFA8CFFFFFFF7C2D7CFFFF822DAEFFFFAE57%51FD05FF572D51577CA8A9A8FFA8FFA8AFA8A884847E7D595A53592F592F%2E055959842D58A8FFA7572CCFFFFFA8512C5883FFA8FF83572DFFFFFF7D%2D2C7CA7FFFFAE572D2CA7FFFFFFAE2C57FD05FFA82C2D2C83FFFF5757A8%FFA8572CA7FFFF572DA7FFFFFF2C57FD05FFCF2C2D2C8359597E592E2E5A%595A2F5A59592D5984A8A8FFFFFF5157CFFFFF7C2D5751572D83FD04FFA8%572D512D572D2D2C7CFD04FFA7572C5751572C5751A8FD04FFA85757FD06%FFAE2D2D7CFFFF832C5757572C7CFFFFFF822DAEFFFFAE5751FD06FFAE2C%2D7CFD04FF8383FD07FF82A8FD06FF7C57FFFFFFA883575751A7FD07FFA7%5757515858A7A8FD05FFAE83575757587CFD06FFCF5783FD07FFA757A7FF%FFFFA75757577CAEFFFFFF7C7CA8FFFFFF587CFD07FFA757A7FDFCFFFDB8%FFCF58A7FFA8CFFFA7FF837CA7A87C82A7FFA7FFFFFF83CFA8FFFFAEA8FF%FFAEFFFFAE837CCFFFA8FFFFA8837C83FD04FFA8FFFFFFA8FFFFFFA7FFFF%FFA7FFFFCFA7FFFFAEA8FFFFFF837C7CA7FFFF7C827CFFA8FFFFFFAEFFA8%837C83A8CFFFFFA7AE7C827CFD06FF57827CCF58CFFF7C83587D83A85757%FFFF517CFFA7587C57A8FF58A7FFA82CA8FFA8578357FF57CFFF8358CFA8%FFFFFFA857A8FFFF57A8FFFF5758FFFF577CFF837CFFFF517CFFFF7D5783%A858A7837CA8A8A858A7FFFF58A7A751AEA8A72CFFFF7C7DA757A7FD06FF%A758FFFF82AEFF7CCF58A7FFFF7CA7FFA75882FFCF58A7577CFFA783FF7C%827CFFA8827C82FF82AEFF838283A7FFFFFFCF2DA7FFA72DAEFFA75882FF%FF577CA7CF7CFFA77C58FFFF58A8FD04FFAE57A783FF577CFFCF2DA8A77C%83A7837C58FF7CAEFF82FD08FF8357FF58CFFF82A8FF5783FF7C7CFF517C%2DA7A87C7C83837C7CA8A8575857A8AE578257CF58FFFF8357837CFFFFFF%838257AE58827CFF577C5183FF7CA87C7C83FF7C575758FF57FFFFA7577C%837C7C83838358A8588283A7518383837CA7577CA7FF58FD06FFAEA8FF7C%8382A8FF58A8A8FF57FF7CA7837CA8A758CF58837CFF8357A8837CCF7C82%A883FF7CA782A8FF82A7FD05FF8383A82DA7A883837CA8A757FF7CFFA857%7CAE57AEA77CAE7C7CFFFF8357A87CFFFFA77CFF5182A8838382FFFFA783%FFA72DAEA882FD07FF585858FF83585783A8585783FF83837CA8FFFF7C7C%837D82FFFF7C8358FFFFFF58A7575857FF58587CA7577C58FFFFFF7CA8FF%7CA8AE7C7CA7FFFF827C83A8FF83837CA7FFFF7C83FF58577C51AEA85757%827C83FF7CA7FF58A7517C58A77CFFFF83A7CF58FFFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp8 Bn%AI5_BeginGradient: (New Gradient Swatch 1)(New Gradient Swatch 1) 1 2 Bd[<3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F40404040404040404040404040404040404040404040404040404040404040404040404040414141414141414141414141414141414141414141414242424242424242424242424242424243434343434343434343434343434444444444444444444444454545454545454545454646464646464646474747474747474748484848484848494949494949494A4A4A4A4A4A4B4B4B4B4B4B4C4C4C4C4C4D4D4D4D4D4E4E4E4E4E4F4F4F4F4F5050505051515151525252525353535354545454555555565656565757575858585959595A5A5A5B5B5B5C5C5C5D5D5D5E5E5E5F5F6060606161626262636364646565656666676768686969696A6A6B6B6C6C6D6D6E6E6F6F70717172727373747475767677777879797A7A7B7C7C7D7D7E7F7F80818182838484858686878889898A8B8B8C8D8E8F8F9091929393949596979898999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8BABBBCBDBEBFC0C1C3C4C5C6C7C9CACBCCCDCFD0D1D2D4D5D6D8D9DADCDDDEE0E1E2E4E5E7E8E9EBECEEEFF1F2><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020202030303030303030303030303030303030303030303030303030303040404040404040404040404040404040404040404050505050505050505050505050505050505060606060606060606060606060606070707070707070707070707070708080808080808080808080809090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F10101010101010111111111111111212121212121313131313131414141414141515151515151616161616171717><80808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080807F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7D7C7C7C7C7C7C7C7C7C7C7C7C7C7C7C7B7B7B7B7B7B7B7B7B7B7B7B7B7A7A7A7A7A7A7A7A7A7A7A797979797979797979787878787878787878777777777777777776767676767676757575757575757474747474747373737373737272727272717171717170707070706F6F6F6F6F6E6E6E6E6E6D6D6D6D6C6C6C6C6B6B6B6B6A6A6A6A69696969686868676767676666666565656464646363636362626261616060605F5F5F5E5E5E5D5D5C5C5C5B5B5B5A5A595958585857575656555555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A49494848474746454544444342424141403F3F3E3E3D3C3C3B3A3A39383837363635343433323131302F2F2E2D2C2C2B2A2928282726252424232221201F1F1E1D1C1B1A19181817161514131211100F0E0D0C0B0A09080706050403020100><3232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232333333333333333333333333333333333333333333333333333333333333333333333333333333333333333434343434343434343434343434343434343434343434343535353535353535353535353535353535353636363636363636363636363636373737373737373737373737383838383838383838383939393939393939393A3A3A3A3A3A3A3A3A3B3B3B3B3B3B3B3C3C3C3C3C3C3C3D3D3D3D3D3D3E3E3E3E3E3E3F3F3F3F3F3F4040404040414141414142424242424343434344444444454545454646464647474747484848484949494A4A4A4A4B4B4B4C4C4C4D4D4D4E4E4E4F4F4F50505051515152525253535454545555565656575758585859595A5A5B5B5C5C5C5D5D5E5E5F5F606061616262636364646565666767686869696A6A6B6C6C6D6D6E6F6F7071717272737474757676777878797A7B7B7C7D7D7E7F808081828383848586878788898A8B8C8C8D8E8F90919292939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B4B5B6B7B8B9BABCBDBEBFC0C2C3C4C5C7C8C9CACCCDCED0D1D2D4><8080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080808080818181818181818181818181818181818181818181818181818181818181818181828282828282828282828282828282828282828282828283838383838383838383838383838383848484848484848484848484848485858585858585858585858586868686868686868686878787878787878787888888888888888889898989898989898A8A8A8A8A8A8A8B8B8B8B8B8B8C8C8C8C8C8C8D8D8D8D8D8D8E8E8E8E8E8F8F8F8F8F90909090909191919191929292929393939394949494959595959696969697979797989898999999999A9A9A9B9B9B9C9C9C9D9D9D9E9E9E9F9F9FA0A0A0A1A1A1A2A2A3A3A3A4A4A4A5A5A6A6A6A7A7A8A8A9A9A9AAAAABABACACADADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B7B7B8B8B9B9BABABBBCBCBDBDBEBFBFC0C0C1C2C2C3C4C4C5C5C6C7C7C8C9CACACBCCCCCDCECECFD0D1D1D2D3D4D4D5D6D7D8D8D9DADBDCDCDDDEDFE0E1E1E2E3E4E5E6E7E8E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0EFEFEFEFEEEEEEEEEDEDEDEDECECECECEBEBEBEAEAEAEAE9E9E9E8E8E8E8E7E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E2E1E1E0E0E0DFDFDEDEDEDDDDDCDCDCDBDBDADAD9D9D8D8D7D7D6D6D5D5D4D4D3D3D2D2D1D1D0D0CFCFCECDCDCCCCCBCBCAC9C9C8C7C7C6C6C5C4C4C3C2C2C1C0C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B0AFAFAEADACABAAA9A9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8C8B8A8988878684838281807E7D7C7B79787776747372706F6E6C6B6A686765646361605E5D5B5A5857555452514F4D4C4A4947454442403F3D3B3A38363433312F2D2B2A28262422201E1C1A18161413110E0C0A0806040200>3 %_Br[0.490005 0 1 0.389999 (PANTONE 576 C) 0.5 3 87 0 %_BS%_0.490005 0 1 0.389999 (PANTONE 576 C) 0.5 3 87 0 Bs0.95 0.09 0 0.83 (PANTONE 546 C) 0 3 50 100 %_BS%_0.95 0.09 0 0.83 (PANTONE 546 C) 0 3 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 6 Bd[<3A393837363534333231302F2E2D2C2B2A2928272524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A0908070605040302><FFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFC><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFDFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F9F8F8F8F8F8F8F8F7F7F7F7><2A292828272625252423222121201F1E1E1D1C1B1B1A191818171615151413121111100F0E0E0D0C0B0B0A09080807060505040302020100>1 %_Br<2324242526272728292A2B2B2C2D2E2E2F303131323334343536373738393A>11<0B0C0D0E0F101112131415161718191A1B1C1D1F202122232425262728292A>1 %_Br<09090909090A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F101010101010101010101111111111111111111212121212121212121213131313131313131313141414141414141414141515151515151515151516161616161616161616161717171717171717171717181818181818181818181819191919191919191919191A1A1A1A1A1A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1C1C1C1C1C1D1D1D1D1D1D1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2020202020202020202020202020202021212121212121212121212121212121212122222222222222222222222222222222222222222222232323232323232323232323232323><3E3F3F40414243444545464748494A4B4B4C4D4E4F5050515253545555565758595A5A5B5C5D5E5F5F6061626363646566676868696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7E7F808181828384858586878888898A8B8B8C8D8E8E8F90919192939394959696979899999A9B9B9C9D9E9E9FA0A0A1A2A3A3A4A5A5A6A7A7A8A9A9AAABACACADAEAEAFB0B0B1B2B2B3B4B4B5B6B6B7B8B8B9BABABBBBBCBDBDBEBFBFC0C1C1C2C2C3C4C4C5C6C6C7C7C8C9C9CACACBCCCCCDCDCECFCFD0D0D1D2D2D3D3D4D4D5D6D6D7D7D8D8D9D9DADADBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECECEDEDEEEEEFEFF0F0F0F1F1F2F2F2F3F3F4F4F4F5F5F6F6F6F7F7F7F8F8F8F9F9F9FAFAFAFBFBFBFCFCFCFCFDFDFDFDFEFEFEFEFEFFFFFFFFFF><1F202122232425262728292A2B2C2D2E2F30313233343536373838393A3B3C3D3E3F404142434445464748494A4B4C4C4D4E4F505152535455565758595A5A5B5C5D5E5F60616263646465666768696A6B6C6D6D6E6F70717273747475767778797A7B7B7C7D7E7F8081818283848586868788898A8B8C8C8D8E8F909091929394959596979899999A9B9C9D9D9E9FA0A1A1A2A3A4A5A5A6A7A8A8A9AAABABACADAEAEAFB0B1B1B2B3B4B4B5B6B7B7B8B9BABABBBCBCBDBEBFBFC0C1C1C2C3C3C4C5C6C6C7C8C8C9CACACBCCCCCDCECECFD0D0D1D1D2D3D3D4D5D5D6D7D7D8D8D9DADADBDBDCDDDDDEDEDFE0E0E1E1E2E2E3E4E4E5E5E6E6E7E7E8E8E9E9EAEBEBECECEDEDEEEEEFEFEFF0F0F1F1F2F2F3F3F4F4F4F5F5F6F6F7F7F7F8F8F9F9F9FAFAFAFBFBFBFCFCFCFDFDFDFDFEFEFEFEFEFFFFFFFF><000000000000000000000001010101010101010101010101010101010101010102020202020202020202020202020202020202020203030303030303030303030303030303030303030303030404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070708080808080808080808080808080808080808080808080808080808080909090909090909090909090909090909090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B>1 %_Br<020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030303040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050606060606060606060606060606060606060606060606060606060606060606060607070707070707070707070707070707070707070707070707070707070707070707070808080808080808080808080808080808080808080808080808080808080808080808080808090909090909090909090909090909090909090909><FCFBFAF9F8F8F7F6F5F4F3F2F1F1F0EFEEEDECEBEAEAE9E8E7E6E5E4E3E3E2E1E0DFDEDDDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0D0CFCECDCCCBCACAC9C8C7C6C5C4C4C3C2C1C0BFBFBEBDBCBBBAB9B9B8B7B6B5B4B4B3B2B1B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929291908F8E8D8D8C8B8A898988878685858483828181807F7E7D7D7C7B7A797978777676757473727271706F6F6E6D6C6B6B6A696868676665656463626261605F5F5E5D5C5C5B5A59595857575655545453525251504F4F4E4D4D4C4B4B4A494948474746454544434342424140403F3F3E3E><F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959594939291908F8E8D8C8B8A89888786868584838281807F7E7D7C7B7A79797877767574737271706F6E6E6D6C6B6A69686766656564636261605F5E5D5D5C5B5A59585756555554535251504F4E4E4D4C4B4A4948484746454443434241403F3E3E3D3C3B3A393938373635353433323131302F2E2D2D2C2B2A2A29282727262525242323222121201F1F>01 %_Br<04040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404040403030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202><1D1E1F20212223242425262728292A2B2C2D2E2F30313232333435363738393A3B3C3D3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545555565758595A5B5B5C5D5E5F6061616263646566666768696A6B6B6C6D6E6F707071727374757576777879797A7B7C7D7D7E7F808181828384848586878888898A8B8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9F9FA0A1A2A2A3A4A4A5A6A7A7A8A9A9AAABABACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B7B7B8B9B9BABBBBBCBDBDBEBFBFC0C0C1C2C2C3C3C4C5C5C6C7C7C8C8C9C9CACBCBCCCCCDCECECFCFD0D0D1D2D2D3D3D4D4D5D5D6D6D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E5E6E6E7E7E8E8E9E9E9EAEAEBEBECECECEDEDEEEEEEEFEFEFF0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8F8F8F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFCFCFCFCFCFC><0D0E0F101112131415161718191A1B1C1D1E1F20212223242526262728292A2B2C2D2E2F30313233343536373839393A3B3C3D3E3F40414243444546464748494A4B4C4D4E4F4F50515253545556575858595A5B5C5D5E5F5F60616263646565666768696A6B6B6C6D6E6F7070717273747575767778797A7A7B7C7D7E7E7F8081828283848586868788898A8A8B8C8D8E8E8F909191929394949596979798999A9A9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A7A8A9AAAAABACACADAEAEAFB0B0B1B2B2B3B4B5B5B6B7B7B8B8B9BABABBBCBCBDBEBEBFC0C0C1C1C2C3C3C4C4C5C6C6C7C8C8C9C9CACACBCCCCCDCDCECFCFD0D0D1D1D2D2D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E4E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F2F3F3F3F4F4F4F4F5F5F5F5F5F6F6F6F6F6F6F7F7F7F7F7F7>01 %_Br[0.007813 0.988281 0.96875 0 1 22.7273 100 %_BS%_0.007813 0.988281 0.96875 0 1 22.7273 100 Bs0.226563 1 1 0.164063 1 50 93.2584 %_BS%_0.226563 1 1 0.164063 1 50 93.2584 Bs0.136719 1 1 0.042969 1 50 62.3595 %_BS%_0.136719 1 1 0.042969 1 50 62.3595 Bs0.035156 0.242188 0.121094 0 1 39.3939 34.8315 %_BS%_0.035156 0.242188 0.121094 0 1 39.3939 34.8315 Bs0.007813 0.988281 0.96875 0 1 46.5116 10.6742 %_BS%_0.007813 0.988281 0.96875 0 1 46.5116 10.6742 Bs0.015625 0.113281 0.050781 0 1 37.5 2.24719 %_BS%_0.015625 0.113281 0.050781 0 1 37.5 2.24719 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 134)(Unnamed gradient 134) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627282A2B2C2D2E2F303132333435363738393A3B3C3D3E><0001010203030405050607070808090A0A0B0C0C0D0E0E0F101011121213141415161617181819191A1B1B1C1D1D1E1F1F20212122232324252526272728><00000101010102020202030303040404040505050606060607070707080808090909090A0A0A0B0B0B0B0C0C0C0C0D0D0D0E0E0E0E0F0F0F101010101111>01 %_Br[0 0 0 0 1 50 0 %_BS%_0 0 0 0 1 50 0 Bs0.242188 0.15625 0.066406 0 1 50 100 %_BS%_0.242188 0.15625 0.066406 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 7 Bd[<0A0B0C0C0D0E0F10111213141516161718191A1B1C1D1E1F20212223242526272728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C><070808090A0A0B0C0C0D0E0E0F10101112131314151516171818191A1A1B1C1D1D1E1F1F202122222324252526272828292A2A2B2C2D2D2E2F30303132333334353636373839393A3B3C3C3D3E3F3F404142424344454546474848494A4B4B4C4D4E4E4F5051><0607070808090A0A0B0C0C0D0E0E0F1010111212131414151616171818191A1A1B1C1C1D1E1F1F20212122232324252526272828292A2A2B2C2C2D2E2F2F30313132333334353636373838393A3B3B3C3D3D3E3F40404142424344454546474748494A4A4B4C><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101>1 %_Br<1A1918171615141211100F0E0D0C0B0A><1110100F0E0E0D0C0C0B0A0A09080807><11100F0F0E0D0D0C0B0A0A0908070706>01 %_Br<54535251504F4E4D4C4B4A4948464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A><3C3B3A3A393837373635343333323130302F2E2D2D2C2B2A2A292827272625242423222121201F1E1E1D1C1B1B1A191818171615151413121211><3D3C3B3A3A393837373635343433323130302F2E2D2D2C2B2A2A292827262625242323222120201F1E1D1C1C1B1A191918171616151413121211>01 %_Br<000000000000010101010102020202030303040404050505060606070708080809090A0A0B0B0C0C0D0D0E0E0F0F10101111121313141415161617171819191A1B1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2D2E2E2F3031323333343536373839393A3B3C3D3E3F40414142434445464748494A4B4C4D4E4F5051525354><0000000000000001010101010102020202020303030304040404050505050606060707070808080909090A0A0B0B0B0C0C0C0D0D0E0E0F0F0F1010111112121313131414151516161717181819191A1B1B1C1C1D1D1E1E1F1F202121222223242425252627272828292A2A2B2C2C2D2D2E2F2F30313132333334353536373838393A3A3B3C><00000000000000010101010101020202020203030303040404040505050606060607070708080809090A0A0A0B0B0B0C0C0D0D0E0E0E0F0F1010111111121213131414151516161717181819191A1A1B1C1C1D1D1E1E1F1F202121222223242425252627272828292A2A2B2C2C2D2E2E2F3030313232333434353636373838393A3B3B3C3D>01 %_Br<0A0909080706050403020100><070706060504040302010100><060605050404030302010100>01 %_Br<1717161615141413121211100F0F0E0D0C0C0B0A><161515141413121111100F0E0D0C0C0B0A090807><171616151414131211100F0E0D0C0B0A09080706>01 %_Br[0.421875 0.316406 0.296875 0.003906 1 87 91.573 %_BS%_0.421875 0.316406 0.296875 0.003906 1 87 91.573 Bs0.039063 0.027344 0.023438 0 1 51.3513 49.4382 %_BS%_0.039063 0.027344 0.023438 0 1 51.3513 49.4382 Bs0.101563 0.066406 0.066406 0 1 50 33.1461 %_BS%_0.101563 0.066406 0.066406 0 1 50 33.1461 Bs0.328125 0.234375 0.238281 0 1 50 17.4157 %_BS%_0.328125 0.234375 0.238281 0 1 50 17.4157 Bs0 0 0 0 1 64.5161 0.005 %_BS%_0 0 0 0 1 64.5161 0 Bs0.039063 0.027344 0.023438 0 1 56.1798 0.0025 %_BS%_0.039063 0.027344 0.023438 0 1 56.1798 0 Bs0.089844 0.085938 0.089844 0 1 56.1798 0 %_BS%_0.089844 0.085938 0.089844 0 1 56.1798 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 51)(Unnamed gradient 51) 0 2 Bd[<1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F1F1F202020202020202121212121212222222222232323232324242424242525252526262626272727272828282929292A2A2A2A2B2B2B2C2C2C2D2D2D2E2E2F2F2F3030303131323232333334343435353636373738383839393A3A3B3B3C3C3D3D3E3E3F3F4040414142434344444545464747484849494A4B4B4C4D4D4E4E4F5050515252535454555656575859595A5B5B5C5D5E5E5F606161626364646566676868696A6B6C6D6D6E6F7071727273747576777879797A7B7C7D7E7F80818283848586878889898A8B8C8D><161616161616161616161616161616161616161616161616161617171717171717171717171717171818181818181818181819191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F1F202020202121212122222223232323242424252525252626262727272828282929292A2A2A2B2B2B2C2C2D2D2D2E2E2F2F2F30303131313232333333343435353636373738383839393A3A3B3B3C3C3D3D3E3E3F3F4041414242434344444545464747484849494A4B4B4C4C4D4E4E4F505051515253535455555657575859595A5B5B5C5D5E5E5F60606162636364656666676869696A6B6C6C6D6E6F70><1111111111111111111111111111111111111111111111111112121212121212121212121212121313131313131313131314141414141414141515151515151516161616161717171717171818181818191919191A1A1A1A1A1B1B1B1B1C1C1C1C1D1D1D1E1E1E1E1F1F1F20202021212121222222232323242425252526262627272728282929292A2A2B2B2B2C2C2D2D2E2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3F3F40404141424343444445464647474849494A4B4B4C4C4D4E4E4F50505152525354555556575758595A5A5B5C5C5D5E5F5F6061626363646566666768696A6A6B6C6D6E6F><00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101010101010101010101010101010101010101010101010101020202020202020202020202020202020202030303030303030303030303030303040404040404040404040404040505050505050505050505060606060606060606060607070707070707070708080808080808080809090909090909090A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0C0C0C0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0F0F0F0F0F0F1010101010101111111111111212121212121313131313141414141415151515151616161616171717>1 %_Br[0.554688 0.4375 0.433594 0.089844 1 50 100 %_BS%_0.554688 0.4375 0.433594 0.089844 1 50 100 Bs0.113281 0.085938 0.066406 0 1 73.0337 0 %_BS%_0.113281 0.085938 0.066406 0 1 73.0337 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 54)(Unnamed gradient 54) 0 2 Bd[<1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F1F2020202020202121212121212222222223232323232424242425252525262626272727272828282929292A2A2A2B2B2B2C2C2C2D2D2D2E2E2E2F2F30303031313232323333343435353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F4040414142424344444545464647484849494A4A4B4C4C4D4E4E4F4F5051515253535455555657575859595A5B5C5C5D5E5E5F606161626364646566676768696A6A6B6C6D6E6E6F7071727273747576777778797A7B7C7D7D7E7F80818283848585868788898A8B8C8D8E8F90919293949595969798999A9B9C><161616161616161616161616161616161616171717171717171717171717181818181818181818191919191919191A1A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1D1D1D1D1D1E1E1E1E1F1F1F1F2020202021212121222222232323232424242525252626262727272828282929292A2A2A2B2B2C2C2C2D2D2D2E2E2F2F2F303031313232323333343435353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F404041414242434344444546464747484849494A4B4B4C4C4D4E4E4F4F505151525253545455565657585859595A5B5B5C5D5D5E5F5F60616262636464656666676869696A6B6C6C6D6E6F6F707172727374757576777879797A7B7C7D><1111111111111111111111111111111111111212121212121212121212131313131313131313141414141414141515151515161616161616171717171718181818191919191A1A1A1A1B1B1B1B1C1C1C1C1D1D1D1E1E1E1F1F1F1F2020202121212222222323232424252525262626272728282829292A2A2A2B2B2C2C2D2D2D2E2E2F2F3030313132323233333434353536363737383839393A3B3B3C3C3D3D3E3E3F3F40414142424343444545464647484849494A4B4B4C4D4D4E4E4F5050515252535454555656575858595A5B5B5C5D5D5E5F60606162626364656566676868696A6B6C6C6D6E6F6F7071727373747576777878797A7B7C7D><000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101020202020202020202020202020203030303030303030303040404040404040404040505050505050505060606060606060607070707070707080808080808080909090909090A0A0A0A0A0A0B0B0B0B0B0B0C0C0C0C0C0D0D0D0D0D0D0E0E0E0E0E0F0F0F0F0F1010101011111111111212121212131313131414141415151515161616161717171718181818191919191A1A1A1A1B1B1B1B1C1C1C1D1D1D1D1E1E1E1F1F1F1F20202021212122222222232323242424252525262626262727272828282929292A2A2A2B2B2B2C>1 %_Br[0.613281 0.488281 0.488281 0.171875 1 50 100 %_BS%_0.613281 0.488281 0.488281 0.171875 1 50 100 Bs0.113281 0.085938 0.066406 0 1 70.2247 0 %_BS%_0.113281 0.085938 0.066406 0 1 70.2247 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 59)(Unnamed gradient 59) 1 2 Bd[<0001020203040506060708090A0A0B0C0D0E0E0F1011121213141516161718191A1A1B1C1D1E1E1F2021222323242526272728292A2B2B2C2D2E2F2F3031323333343536373738393A><000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F3031323435363738393A3B3C3D3E3F40414243444546474849><00000000000000000000010101010101010101010101010101010101020202020202020202020202020202020202030303030303030303030303030303030303040404040404040404>01 %_Br[0 0 0 0 1 50 0 %_BS%_0 0 0 0 1 50 0 Bs0.226563 0.285156 0.015625 0 1 50 100 %_BS%_0.226563 0.285156 0.015625 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 60)(Unnamed gradient 60) 1 4 Bd[<000102030405060708090A0B0C0D0D0E0F10111213141516171819191A1B1C1D1E1F2021212223242526272728292A2B2C2D2D2E2F3031323233343536363738393A3A3B3C3D3D3E3F40404142434444454646474849494A4B4C4C4D4E4E4F5050515252535454555656575858595A5A5B5C5C5D5D5E5F5F60616162626363646565666667676869696A6A6B6B6C6C6D6D6E6E6F6F7070717172727373747475757676777777787879797A7A7A7B7B7C7C7C7D7D7E7E7E7F7F7F808080818181828282838383848484858585858686868687878787888888888889898989898A8A8A8A8A8A8A8B8B8B8B8B8B8B8B8B8B8B8B8B8B><000102030405060708090A0B0C0D0E0F10111213131415161718191A1B1C1D1E1F1F20212223242526272728292A2B2C2D2E2E2F3031323333343536373838393A3B3C3C3D3E3F40404142434344454646474849494A4B4C4C4D4E4F4F50515152535454555656575858595A5A5B5C5C5D5E5E5F5F606161626363646465666667676869696A6A6B6B6C6D6D6E6E6F6F70707171727273737474757576767777787879797A7A7A7B7B7C7C7D7D7D7E7E7F7F7F8080818181828282838384848485858586868686878787888888888989898A8A8A8A8A8B8B8B8B8C8C8C8C8C8C8D8D8D8D8D8D8D8E8E8E8E8E8E8E8E8E8E8E8E8E><000101020203030404050506060707080809090A0A0B0B0C0C0D0D0E0E0F0F1010111112121313141415151516161717181819191A1A1A1B1B1C1C1D1D1E1E1E1F1F202021212122222323232424252525262627272728282929292A2A2B2B2B2C2C2C2D2D2D2E2E2F2F2F303030313131323232333333343434353535363636373737383838383939393A3A3A3B3B3B3B3C3C3C3D3D3D3D3E3E3E3E3F3F3F3F40404040414141414242424242434343434444444444454545454546464646464647474747474748484848484849494949494949494A4A4A4A4A4A4A4A4A4B4B4B4B4B4B4B4B4B4B4B4B4B4B4C4C4C4C4C4C4C4C><00000000000001010101010101010101010202020202020202020202020303030303030303030303030404040404040404040404040405050505050505050505050505050606060606060606060606060606070707070707070707070707070707080808080808080808080808080808080909090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D>1 %_Br<8B8C8C8D8D8E8E8F8F909091919292929393949495959696979798989899999A9A9B9B9C9C9D9D9E9E9F9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A6A7A7A8A8A9A9AAAAABABACACADADADAEAEAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABABBBBBCBCBDBD><8E8F9091929394959697989A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FA><4C4B4A4A49484847464645444343424141403F3F3E3D3D3C3B3A3A39383837363635343433323231302F2F2E2D2D2C2B2B2A2929282727262524242322222120201F1E1E1D1C1B1B1A1919181717161515141313121110100F0E0E0D0C0C0B0A0A0908080706050504030302><0D0D0D0D0D0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0909090909090909090808080808080808080707070707070707070606060606060606060505050505050505050404040404040404040303030303030303030202020202020202020101010101>1 %_Br<BDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B4B4B4B4B3B3B3B2B2B2B2B1B1B1B1B0B0B0AFAFAFAFAEAEAEADADADADACACACABABABABAAAAAAA9A9A9A9A8A8A8A7A7A7A7A6A6A6A5A5A5A4A4A4A4A3A3A3A2A2A2A2A1A1A1A0><FAF9F9F8F7F6F6F5F4F3F2F2F1F0EFEEEDEDECEBEAE9E8E8E7E6E5E4E3E3E2E1E0DFDEDDDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCECECDCCCBCAC9C8C7C6C6C5C4C3C2C1C0BFBEBDBDBCBBBAB9B8B7B6B5B4B4B3B2B1B0AFAEADACABAAA9A9A8A7A6A5A4A3A2A1A09F><020304040506070809090A0B0C0D0E0F10111112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465><01010202020303030404050505060607070708080809090A0A0A0B0B0C0C0C0D0D0E0E0F0F0F1010111111121213131314141515161616171718181919191A1A1B1B1B1C1C1D1D1E1E1E1F1F20202121212222232324242425252626272727282829292A2A2B2B2B2C>1 %_Br[0 0 0 0 1 33.3333 0 %_BS%_0 0 0 0 1 33.3333 0 Bs0.546875 0.558594 0.296875 0.050781 1 50 56.7416 %_BS%_0.546875 0.558594 0.296875 0.050781 1 50 56.7416 Bs0.742188 0.980469 0.007813 0.003906 1 51.9231 85.3932 %_BS%_0.742188 0.980469 0.007813 0.003906 1 51.9231 85.3932 Bs0.628906 0.625 0.394531 0.171875 1 51.9231 100 %_BS%_0.628906 0.625 0.394531 0.171875 1 51.9231 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed 18)0 Auu0 J 0 j 1 w 4 M []0 d0 XR-3998.7319 4558.8438 m-3890.1599 4558.8438 L-3890.1599 4557.4312 L-3998.7319 4557.4312 L-3998.7319 4558.8438 Lnu0 O0.695313 0.671875 0.636719 0.738281 k-3890.1599 4557.4688 m-3890.2112 4557.4312 L-3890.3442 4557.5352 L-3890.1599 4557.4688 Lf-3891.0344 4557.6997 m-3891.0088 4557.7188 -3891.0212 4557.75 -3890.9951 4557.769 C-3890.4817 4557.4727 L-3890.7112 4557.3047 -3890.8833 4557.8125 -3891.0344 4557.6997 cf-3891.1855 4557.6699 m-3891.3848 4557.6006 -3891.4673 4557.7393 -3891.5137 4557.7871 C-3891.4441 4557.6792 -3891.1423 4557.8203 -3891.1855 4557.6699 Cf-3908.7217 4557.7393 m-3908.7031 4557.7383 -3908.6785 4557.7344 -3908.6599 4557.73 C-3908.6912 4557.7256 -3908.7112 4557.73 -3908.7217 4557.7393 Cf-3913.2969 4558.2119 m-3913.3447 4558.3232 L-3912.4912 4558.125 -3911.5281 4558.3262 -3910.6252 4558.2393 C-3910.6863 4558.2793 L-3908.3953 4558.3223 -3906.2825 4558.1367 -3904.0095 4558.0518 C-3904.0449 4558.0645 -3904.0569 4558.0967 -3904.0935 4558.1094 c-3903.9839 4558.0713 -3903.8623 4558 -3903.7393 4558.0093 C-3903.7073 4558.0342 -3903.7737 4558.061 -3903.8132 4558.0723 C-3903.3333 4558.2559 -3902.4033 4557.9561 -3902.1033 4558.0977 C-3901.9683 4558.0781 -3901.9087 4558.0015 -3901.9839 4557.9429 C-3900.2048 4557.896 -3898.3015 4557.8608 -3896.4895 4557.7168 C-3896.4023 4557.7422 -3896.3865 4557.792 -3896.4104 4557.8555 C-3894.8616 4557.5576 -3893.2383 4557.6763 -3891.6536 4557.7246 C-3891.5928 4557.6465 -3891.8152 4557.6416 -3891.6592 4557.5601 C-3892.1687 4557.4624 -3892.5923 4557.7524 -3893.0544 4557.6094 C-3892.9951 4557.5342 L-3893.3313 4557.4854 -3893.0632 4557.7246 -3893.4121 4557.6274 C-3893.5496 4557.5645 -3893.3777 4557.5313 -3893.4417 4557.5254 C-3894.1563 4557.5566 -3894.9016 4557.4883 -3895.5745 4557.6719 C-3895.7407 4557.5078 -3896.3423 4557.666 -3896.6064 4557.5093 C-3896.7913 4557.5742 -3896.9768 4557.5576 -3897.0471 4557.666 C-3899.5481 4557.5796 -3902.1033 4557.7383 -3904.6653 4557.7261 C-3905.8643 4558.0435 -3907.3 4557.665 -3908.7231 4557.7715 C-3908.7329 4557.7603 -3908.7312 4557.748 -3908.7217 4557.7393 C-3909.1855 4557.8174 -3909.8616 4557.8545 -3910.4153 4557.8145 C-3910.8843 4557.9492 L-3914.2161 4557.6729 -3917.6208 4557.8672 -3921.0049 4557.7524 c-3924.8503 4557.6729 -3928.2192 4557.4453 -3931.9641 4557.8633 C-3931.9592 4557.832 -3931.9895 4557.8145 -3931.8928 4557.8022 C-3932.9736 4557.8662 -3933.9583 4557.7524 -3934.9761 4557.8184 C-3934.9729 4557.7871 L-3937.4983 4558.0488 -3940.2295 4557.7524 -3942.6641 4558.0342 C-3945.6279 4558.0059 -3948.9792 4558.0342 -3952.1162 4558.1152 C-3952.1089 4558.0518 L-3954.6191 4558.1846 -3957.0449 4557.8516 -3959.5496 4557.9517 C-3962.1252 4557.8086 -3964.8464 4558.3125 -3967.4441 4558.1211 C-3969.0513 4557.8125 -3971.1624 4558.4741 -3972.6721 4558.1543 C-3975.7737 4557.6719 -3978.7825 4557.9824 -3981.8833 4558.2715 C-3984.7439 4558.0996 -3987.6001 4558.541 -3990.3704 4558.1904 C-3991.6831 4558.415 -3993.1328 4557.9121 -3994.5935 4557.9766 C-3994.5413 4558.0547 L-3995.0657 4557.8184 -3995.7097 4558.3853 -3996.0369 4558.0342 C-3995.9817 4558.0181 L-3996.2593 4557.8398 -3996.6265 4558.4385 -3996.7952 4558.2261 C-3996.8401 4558.3145 L-3997.1763 4558.3398 -3996.8799 4558.2144 -3997.1392 4558.1792 C-3997.2368 4558.1904 -3997.1763 4558.3398 -3997.3799 4558.2891 C-3997.4241 4557.9287 -3998.2031 4558.3672 -3998.2263 4557.9624 C-3998.0425 4557.9624 -3998.5144 4557.8057 -3998.1016 4557.7207 C-3998.2192 4557.6792 -3998.7825 4557.6992 -3998.7319 4557.8711 C-3998.78 4558.0537 -3999 4558.2124 -3998.6577 4558.3535 C-3998.5889 4558.2207 L-3998.4736 4558.3535 -3998.5012 4558.2871 -3998.46 4558.3867 C-3998.0127 4558.4043 -3997.9529 4558.5977 -3997.6321 4558.6772 C-3997.6353 4558.6729 -3997.6384 4558.6699 -3997.6335 4558.6631 C-3997.4143 4558.5039 -3997.1111 4558.5977 -3996.9375 4558.6211 C-3996.8679 4558.6953 L-3996.7625 4558.8496 -3996.3591 4558.3926 -3996.4951 4558.6582 C-3995.5857 4558.5923 -3994.5432 4558.5957 -3993.5271 4558.5923 C-3993.3848 4558.4912 -3992.7493 4558.6016 -3992.9712 4558.4072 c-3992.7168 4558.6289 -3991.9607 4558.6846 -3991.6799 4558.6763 C-3991.6904 4558.6973 -3991.7024 4558.7207 -3991.7463 4558.7124 C-3991.2017 4559 -3991.1008 4558.4463 -3990.5903 4558.7979 C-3990.5105 4558.5493 -3989.6631 4558.8774 -3989.3743 4558.5854 C-3989.3113 4558.6406 -3989.2903 4558.6904 -3989.3132 4558.7344 C-3988.3943 4558.7393 -3987.3792 4558.8296 -3986.6016 4558.8408 C-3985.9373 4558.623 -3984.9929 4558.9395 -3984.4216 4558.6387 C-3983.9482 4558.7017 -3983.1824 4558.8281 -3982.5215 4558.707 C-3982.5857 4558.7437 L-3981.8401 4558.7261 -3980.9087 4558.7104 -3980.3972 4558.5215 C-3980.1768 4558.8096 -3979.8545 4558.7524 -3979.5322 4558.8438 C-3979.0344 4558.7104 -3978.0295 4558.75 -3977.27 4558.6289 C-3977.1536 4558.7617 -3976.6433 4558.5723 -3976.6042 4558.7656 C-3974.4761 4558.3926 -3971.8447 4558.5225 -3969.5723 4558.8047 C-3969.6052 4558.8184 L-3969.3103 4558.7124 -3968.9705 4558.4785 -3968.6704 4558.3413 C-3968.6409 4558.3584 -3968.6443 4558.3896 -3968.7073 4558.3896 C-3968.2922 4558.3535 -3967.9041 4558.5435 -3967.4895 4558.5078 C-3967.4929 4558.54 -3967.4929 4558.54 -3967.5601 4558.5703 C-3967.1711 4558.4844 -3966.7561 4558.7246 -3966.2969 4558.5752 C-3966.2712 4558.6265 L-3965.9792 4558.5547 L-3965.9863 4558.6182 -3965.9976 4558.7144 -3966.1536 4558.6934 C-3962.5903 4558.7559 -3958.9121 4558.4248 -3955.2537 4558.4727 C-3955.3879 4558.5332 L-3954.6785 4558.4248 L-3954.6824 4558.457 -3954.7161 4558.4727 -3954.75 4558.4873 C-3953.8464 4558.5957 -3952.9087 4558.415 -3952.0281 4558.4424 C-3952.0322 4558.4736 -3952.1655 4558.5352 -3952.0422 4558.5703 C-3951.3904 4558.396 -3950.9951 4558.7964 -3950.6687 4558.4351 C-3950.6384 4558.4517 -3950.6177 4558.5332 -3950.6841 4558.5625 C-3948.8704 4558.4424 -3947.0081 4558.4492 -3945.1809 4558.5078 C-3943.6592 4558.1807 -3941.9583 4558.4766 -3940.3777 4558.2168 C-3940.3855 4558.2822 L-3938.3391 4558.0537 -3936.1682 4558.2979 -3934.0471 4558.2524 C-3933.1663 4558.2783 -3932.5713 4558.2012 -3931.6863 4558.1973 C-3931.6641 4558.2783 L-3930.1743 4557.9688 -3928.5327 4558.5566 -3926.9785 4558.2158 C-3927.0857 4558.3262 L-3926.8447 4558.1553 -3926.1455 4558.3867 -3926.2375 4558.0933 C-3925.9631 4558.1816 L-3924.9072 4557.7949 -3924.0413 4558.3608 -3922.7473 4558.1094 C-3922.8323 4558.1792 L-3922.4883 4558.125 -3922.0872 4558.082 -3921.8323 4558.1465 C-3921.8721 4558.1563 -3921.8535 4558.1768 -3921.9353 4558.1953 C-3920.8577 4558.4707 -3919.6584 4558.166 -3918.5215 4558.1768 C-3918.6504 4558.3062 L-3918.1008 4558.1543 -3917.0928 4558.2959 -3916.3704 4558.2261 C-3916.4143 4558.2871 L-3916.0488 4558.2012 L-3916.0393 4558.3232 L-3915.0991 4558.332 -3914.2144 4558.2261 -3913.2969 4558.2119 Cf-3903.8132 4558.0723 m-3903.8159 4558.0713 -3903.8201 4558.0713 -3903.8232 4558.0684 C-3903.8513 4558.0791 -3903.8376 4558.0781 -3903.8132 4558.0723 Cf-3997.5168 4558.7017 m-3997.5601 4558.6953 -3997.5959 4558.6875 -3997.6321 4558.6772 C-3997.6233 4558.7017 -3997.5537 4558.6973 -3997.5168 4558.7017 cfUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 2)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7871.3833 8431.4551 m-7779.5479 8431.4551 L-7779.5479 8427.1758 L-7871.3833 8427.1758 L-7871.3833 8431.4551 Ln0 O0.695313 0.671875 0.636719 0.738281 k-7871.1631 8428.7754 m-7871.5 8428.8418 -7870.9814 8429.0313 -7871.3833 8428.8887 C-7871.3379 8428.7705 -7871.2725 8428.6816 -7871.1631 8428.7754 Cf-7780.6675 8428.9414 m-7781.7524 8429.7041 -7783.1816 8428.9336 -7784.3701 8429.4199 C-7784.5098 8429.4521 -7784.3345 8429.002 -7784.6484 8429.1025 C-7785.8008 8429.6953 -7787.6162 8429.3418 -7789.0195 8428.8848 C-7788.9346 8428.7666 L-7789.2017 8428.6816 -7789.5283 8429.0723 -7789.8115 8429.0176 C-7789.8135 8428.9395 -7789.7207 8428.9063 -7789.7861 8428.7979 C-7789.8574 8429.0352 -7790.2983 8428.9082 -7790.4185 8429.084 C-7790.5303 8428.9922 -7790.5195 8428.8047 -7790.6641 8428.7002 C-7790.8262 8428.9697 L-7791.2769 8429.6094 -7791.9209 8428.9258 -7792.5361 8429.2559 C-7792.5063 8429.1934 -7792.4453 8429.1445 -7792.4941 8429.084 C-7793.4814 8429.4727 -7794.7168 8429.3994 -7795.8208 8429.543 C-7795.7769 8429.4482 -7795.7363 8429.2754 -7795.8008 8429.168 C-7795.8555 8429.4512 -7796.1963 8429.5225 -7796.4922 8429.5781 C-7796.6255 8429.2871 -7796.9995 8429.8438 -7797.3467 8429.6826 C-7797.3169 8429.6191 L-7797.5732 8429.9238 -7797.6973 8429.4434 -7797.9053 8429.8086 C-7798.0684 8429.5801 L-7798.1807 8429.9902 -7798.4395 8429.3672 -7798.6514 8429.5762 C-7798.6445 8429.6602 L-7798.8442 8429.7598 -7798.9482 8429.5537 -7799.1338 8429.623 C-7799.1514 8429.5762 L-7799.5854 8429.6826 -7799.8379 8429.4551 -7799.8271 8429.7754 C-7799.9795 8429.5186 -7799.4063 8429.6582 -7799.6455 8429.2842 C-7801.0732 8429.6152 -7802.5459 8429.5498 -7803.9834 8429.5566 C-7804.1465 8429.4277 -7804.2505 8429.3887 -7804.2871 8429.2666 C-7804.4307 8429.332 -7804.8281 8429.3262 -7804.9585 8429.4902 C-7804.9102 8429.4834 -7805.0513 8429.3262 -7805.1274 8429.3105 C-7805.3887 8429.1895 -7805.4131 8429.6621 -7805.7002 8429.5186 C-7805.5859 8429.4336 -7805.5469 8429.3301 -7805.5854 8429.2109 C-7805.8301 8429.4609 -7806.1577 8429.4209 -7806.4473 8429.502 C-7806.4023 8429.4482 -7806.3325 8429.416 -7806.3433 8429.3154 C-7806.6602 8429.5986 -7806.9209 8429.2559 -7807.1982 8429.4346 C-7807.0947 8429.25 L-7807.5415 8429.0254 -7807.2266 8429.6367 -7807.6128 8429.5039 C-7807.52 8429.4453 -7807.5527 8429.373 -7807.5361 8429.2979 C-7807.8965 8429.6338 -7808.4795 8429.5225 -7808.8389 8429.6367 C-7808.8174 8429.6113 -7808.8232 8429.5605 Y-7809.2148 8429.6025 -7809.6245 8429.498 -7810.0552 8429.6445 C-7810.2119 8429.5625 -7810.0039 8429.1934 -7810.4185 8429.2617 C-7810.4033 8429.6328 -7811.1221 8429.4141 -7810.8779 8429.834 C-7811.2319 8429.7734 -7811.7925 8429.6338 -7812.0283 8429.7598 C-7811.8691 8429.6191 -7812.2007 8429.3066 -7811.9063 8429.2754 C-7812.1289 8429.0498 L-7812.0957 8428.8984 -7811.8999 8429.1016 -7811.9707 8428.9102 C-7812.1182 8428.9258 -7812.5479 8429.0723 -7812.6797 8429.0117 C-7812.9531 8429.2393 -7813.2041 8429.6641 -7813.6465 8429.7109 C-7813.4385 8429.5664 -7813.7646 8429.3018 -7813.6235 8429.2383 C-7814.2407 8429.9482 L-7814.3877 8429.9658 -7814.2725 8429.6563 -7814.4854 8429.7529 C-7814.4746 8429.8506 -7814.5674 8429.9121 -7814.6318 8429.9922 C-7814.6875 8429.9482 -7815.2441 8430.084 -7815.3081 8429.7178 C-7815.3735 8429.5762 -7815.0684 8429.6426 -7815.2314 8429.5117 C-7815.5029 8429.5146 -7815.5151 8429.6406 -7815.7871 8429.6465 C-7815.7925 8429.5977 L-7815.9717 8429.543 -7816.3213 8429.7529 -7816.1265 8429.9551 C-7816.0015 8429.9658 -7816.1738 8429.7354 -7815.9888 8429.8418 C-7816.1152 8430.0537 -7816.4312 8430.1133 -7816.7031 8430.1162 C-7816.6104 8430.0586 -7816.6216 8429.9609 -7816.5845 8429.8574 C-7816.9497 8430.1445 -7817.3369 8430.2354 -7817.7451 8430.3555 C-7817.7515 8430.5293 -7817.5928 8430.0391 -7817.5327 8430.1309 C-7818.0557 8429.8896 -7818.6128 8430.4727 -7819.0479 8430.1201 C-7818.9766 8430.0898 -7819.0098 8430.3672 -7819.0146 8430.3184 C-7819.2666 8430.2969 -7819.2549 8430.0449 -7819.4189 8430.1377 C-7819.4355 8429.9902 -7819.6255 8430.1855 -7819.7944 8430.2305 C-7819.8818 8430.3369 -7819.8384 8430.1582 -7819.6914 8430.1426 C-7819.9268 8430.2666 -7820.8691 8430.4941 -7821.4131 8430.2793 C-7821.4023 8430.377 -7821.7471 8430.6377 -7821.8721 8430.627 C-7821.8232 8430.3984 L-7821.9375 8430.2617 -7822.2422 8430.418 -7822.2632 8430.2227 C-7822.5303 8430.5 -7821.2344 8429.9863 -7821.5957 8430.2002 C-7821.6895 8430.0098 -7822.0991 8430.5645 -7822.0215 8430.2529 C-7822.2725 8430.2617 -7822.5161 8430.5186 -7822.7559 8430.3047 C-7822.6865 8430.3418 -7822.5522 8429.9873 -7822.7549 8430.0039 C-7823.1123 8430.0449 -7822.8564 8430.1133 -7823.1465 8430.1895 C-7823.3281 8430.2832 L-7823.3398 8430.5059 -7823.6475 8430.2529 -7823.5146 8430.502 C-7823.5586 8430.3184 -7824.0337 8430.6152 -7823.9971 8430.2461 C-7823.9473 8429.9551 L-7824.1016 8429.9766 -7824.2002 8430.2617 -7824.3213 8430.3896 C-7824.3418 8430.3633 -7824.3823 8430.3047 -7824.3745 8430.2578 C-7824.3994 8430.7031 -7824.7432 8430.2207 -7824.9268 8430.5645 C-7825.2505 8430.4102 -7825.7495 8430.5498 -7825.9023 8430.2734 C-7826.1514 8430.4082 -7826.3784 8430.5674 -7826.6621 8430.4727 C-7826.6055 8430.4307 -7826.5283 8430.418 -7826.5122 8430.3223 C-7826.6904 8430.1914 -7826.7344 8430.3086 -7826.8975 8430.3809 C-7826.8608 8430.3145 -7827.2539 8430.1201 -7827.4521 8429.9629 C-7827.6992 8430.0957 -7827.6143 8430.3359 -7827.6392 8430.4824 C-7827.8652 8430.043 -7828.3379 8430.7656 -7828.6211 8430.3672 C-7828.5352 8430.3066 -7828.2598 8430.1514 -7828.4658 8430.041 C-7828.6919 8429.6025 -7828.9219 8430.3643 -7829.2861 8430.1543 C-7829.1968 8430.5186 L-7829.3594 8430.293 -7829.7334 8430.7305 -7829.6963 8430.3594 C-7829.8184 8430.4902 -7830.1265 8430.2383 -7830.0859 8430.5938 C-7830.6846 8430.293 -7831.5425 8430.7754 -7831.9102 8430.1377 C-7831.9961 8430.1973 -7832.2104 8430.1367 -7832.1665 8430.3193 C-7832.0239 8430.5176 -7831.9673 8430.1777 -7831.9141 8430.3125 C-7831.9912 8430.3232 -7832.0078 8430.4209 -7832.0161 8430.4697 C-7832.2021 8430.3887 -7832.3486 8430.3633 -7832.1729 8430.0674 C-7832.5869 8429.8477 -7832.6001 8430.6719 -7833.1274 8430.5322 C-7833.1035 8430.3857 -7833.1436 8430.3301 -7833.2979 8430.3535 C-7833.5903 8430.6055 L-7833.9312 8430.5469 -7833.7842 8430.2705 -7833.7925 8430.0215 C-7833.9746 8430.0645 -7834.1973 8430.0527 -7834.2803 8430.2383 C-7834.5015 8429.9258 L-7834.3398 8430.1514 -7834.6514 8430.0762 -7834.7368 8430.1367 C-7834.6514 8430.0762 L-7834.6846 8429.9697 -7834.8955 8430.0352 -7835.0024 8430.0664 C-7834.9766 8430.2207 -7834.7617 8430.2832 -7834.6445 8430.3281 C-7834.7373 8430.4375 -7834.8823 8430.4121 -7835.0059 8430.541 C-7834.9648 8430.2969 -7835.3027 8430.3672 -7835.4473 8430.3418 C-7835.6133 8430.2891 -7835.6348 8430.5605 -7835.6831 8430.5527 C-7835.6875 8430.4258 -7835.9541 8430.5313 -7835.8247 8430.3535 C-7835.7681 8430.3125 -7835.6953 8430.4766 -7835.6016 8430.3643 C-7835.7109 8430.2705 -7835.6982 8430.0498 -7835.9258 8430.2109 C-7836.0967 8430.332 -7835.8818 8430.6934 -7836.2061 8430.5391 C-7836.1211 8430.4785 -7836.1055 8430.3809 -7836.0391 8430.293 C-7836.3433 8430.166 L-7836.3564 8430.3887 L-7836.3975 8430.332 -7836.3691 8430.3125 -7836.3877 8430.2832 C-7836.4785 8430.5176 -7836.8521 8430.3555 -7836.9209 8430.6191 C-7837.0742 8430.6426 -7837.2441 8430.4648 -7837.3906 8430.4395 C-7837.3623 8430.4199 L-7837.5415 8430.2891 -7837.7793 8430.375 -7837.9297 8430.5254 C-7837.9219 8430.4766 L-7838.0195 8430.459 -7838.2505 8430.4941 -7838.3735 8430.625 C-7838.6201 8430.457 -7838.4561 8429.7842 -7838.7295 8430.0645 C-7838.98 8430.0723 -7839.1221 8430.4727 -7839.0215 8430.6152 C-7839.4717 8430.4648 -7839.9834 8430.8281 -7840.4009 8430.4824 C-7840.4658 8430.5723 -7840.4248 8430.6289 -7840.5586 8430.6816 C-7841.2197 8430.5938 -7841.9551 8430.9453 -7842.4814 8430.5078 C-7842.29 8430.4141 -7842.4688 8430.2842 -7842.4727 8430.1582 C-7842.6309 8430.3574 -7842.6631 8429.9512 -7842.7197 8430.293 C-7842.7041 8430.4941 -7842.7197 8430.5918 -7842.5337 8430.6729 C-7842.9282 8430.7813 -7843.5283 8430.7813 -7843.7471 8430.5938 C-7843.6377 8430.6865 -7843.7227 8430.748 -7843.8086 8430.8086 C-7843.7803 8430.4873 -7844.0713 8430.4395 -7844.2915 8430.5527 C-7844.3223 8430.748 L-7844.4658 8430.5469 L-7844.5503 8430.6094 -7844.5591 8430.957 -7844.7773 8430.7695 C-7844.7891 8430.6934 -7844.8018 8430.6162 -7844.8418 8430.5605 C-7845.0693 8430.7207 -7845.3906 8430.9922 -7845.6377 8430.8262 C-7845.8398 8430.541 L-7845.9453 8430.5723 -7846.1235 8430.7441 -7845.9375 8430.8262 C-7846.3594 8430.6543 -7846.6309 8430.6328 -7846.7646 8430.3857 C-7847.4912 8430.9873 -7848.5459 8431.0117 -7849.3906 8430.9688 C-7849.3652 8430.8223 L-7849.5923 8430.6855 -7849.4834 8431.0781 -7849.6416 8430.9766 C-7849.5684 8430.8369 -7849.8145 8430.6729 -7849.6362 8430.502 C-7849.9609 8430.3477 -7850.0547 8430.7559 -7850.2656 8430.8223 C-7850.2979 8431.0146 -7850.0957 8430.6992 -7850.1367 8430.9434 C-7850.1729 8431.0117 -7850.5859 8430.793 -7850.6362 8431.084 C-7850.7178 8430.9697 -7850.6543 8430.7559 -7850.6104 8430.6377 C-7850.8086 8430.7793 L-7851.0513 8430.4395 -7850.2559 8430.1719 -7850.5107 8429.7529 C-7850.6934 8429.7979 L-7850.8682 8429.4941 -7850.21 8429.4551 -7850.6689 8429.3506 C-7850.8682 8429.4941 -7851.0381 8429.916 -7850.8608 8430.0449 C-7851.2754 8430.125 -7851.0527 8430.7383 -7851.4985 8430.7139 C-7851.6201 8430.543 -7851.1416 8430.6729 -7851.2275 8430.4336 C-7851.4375 8430.1992 -7851.6484 8430.5645 -7851.8354 8430.4824 C-7851.6279 8430.5918 -7851.8032 8430.8857 -7851.9375 8430.9395 C-7852.1641 8430.8018 -7851.79 8430.6641 -7852.1113 8430.6338 C-7852.1641 8430.8018 -7852.4595 8430.9277 -7852.2041 8431.0449 C-7852.3203 8431.4258 -7852.5381 8430.9395 -7852.7129 8431.2344 C-7852.8174 8430.9658 -7852.3823 8430.6152 -7852.7354 8430.4814 C-7852.6792 8430.7393 -7853.1704 8430.832 -7852.9839 8431.2139 C-7853.1221 8431.1406 -7853.1367 8430.9375 -7853.0361 8430.7793 C-7853.2334 8430.6201 -7853.5151 8431.25 -7853.5801 8430.7383 C-7853.6479 8431.002 L-7853.71 8430.916 -7853.7983 8430.8506 -7853.8994 8430.709 C-7854.0732 8430.7041 -7854.46 8431.0664 -7854.4443 8430.668 C-7854.5 8430.709 -7854.8975 8430.6914 -7854.7441 8430.9658 C-7854.4971 8431.1338 -7854.46 8430.7656 -7854.3223 8431.1377 C-7854.4971 8430.834 -7854.6787 8431.1777 -7854.8213 8431.2793 C-7854.8447 8431.125 L-7854.9297 8431.1855 -7855.1255 8431.1514 -7855.1787 8431.3184 C-7855.1133 8431.2305 -7855.1475 8431.125 -7855.2148 8431.0879 C-7855.3042 8431.3223 L-7855.6494 8431.4395 -7855.3857 8430.9102 -7855.7217 8430.9785 C-7855.4663 8430.7969 L-7855.5225 8430.8359 -7855.6367 8430.6162 -7855.7979 8430.6895 C-7855.8604 8430.9033 -7855.9775 8431.1602 -7856.0313 8431.3262 C-7856.2207 8431.4199 -7856.1162 8431.085 -7856.3027 8431.3047 C-7856.0586 8431.0469 L-7856.0215 8430.9766 -7856.2231 8430.6934 -7856.4761 8430.6992 C-7856.6377 8430.7734 -7856.8887 8431.082 -7856.6338 8431.1992 C-7856.7607 8431.2031 -7856.9385 8431.0723 -7856.8379 8430.916 C-7857.1255 8430.9902 -7856.7998 8431.1465 -7857.0479 8431.2793 C-7857.1494 8431.1367 -7857.4658 8430.9336 -7857.6563 8430.7266 C-7857.3975 8430.3682 L-7857.5693 8430.3643 L-7857.3467 8430.0781 -7857.6826 8430.1465 -7857.5566 8429.8438 C-7857.6743 8429.7969 -7857.8169 8429.8994 -7857.9307 8429.9785 C-7857.5864 8430.4629 -7858.3159 8430.6406 -7858.2158 8431.082 C-7858.6875 8431.2031 -7858.5107 8430.0078 -7859.0024 8430.6992 C-7858.9219 8430.8145 -7859.1533 8431.1504 -7858.8564 8431.0225 C-7859.1494 8430.9746 -7859.0557 8431.4658 -7859.4014 8431.2832 C-7859.1455 8431.1016 -7859.6763 8430.8359 -7859.3066 8430.5723 C-7859.3311 8430.7178 -7859.1001 8430.6826 -7859.0435 8430.6426 C-7859.1641 8430.4727 -7859.0186 8430.1973 -7859.3184 8430.1973 C-7859.5015 8430.2393 -7859.7524 8430.248 -7859.7158 8430.4785 C-7859.7085 8430.7314 -7859.4365 8430.4512 -7859.5537 8430.707 C-7859.9185 8430.7949 -7859.9795 8430.4102 -7860.1304 8430.8594 C-7859.8999 8430.8232 -7859.8423 8431.084 -7859.8467 8431.2578 C-7860.1143 8431.3633 L-7860.0625 8431.1953 L-7860.4922 8431.0742 -7860.1895 8431.5 -7860.6055 8431.4551 C-7860.8008 8431.123 L-7860.7017 8430.8369 -7860.1953 8431.25 -7860.2695 8430.7842 C-7860.54 8430.7656 -7860.6299 8431.002 -7860.8848 8430.8818 C-7860.8281 8430.8418 -7860.7505 8430.8301 -7860.6943 8430.7891 C-7860.7915 8430.7734 -7860.8877 8430.1563 -7861.2734 8430.5176 C-7861.4727 8430.6582 -7861.3262 8430.6826 -7861.3311 8430.8574 C-7861.7656 8430.9102 -7861.8955 8431.0879 -7862.1753 8431.1152 C-7862.1177 8430.7754 -7862.6699 8431.082 -7862.3608 8430.7344 C-7862.2188 8430.9336 -7861.5903 8430.9141 -7861.4365 8430.5898 C-7861.5947 8430.1865 -7861.0952 8430.6465 -7861.0024 8430.2383 C-7861.3506 8430.2285 -7861.3335 8429.832 -7861.3896 8429.5723 C-7861.4863 8429.5537 -7861.5801 8429.6641 -7861.6377 8429.7041 C-7861.6787 8429.9482 -7861.5522 8429.9453 -7861.5449 8430.1973 C-7861.9336 8430.1309 -7862.3081 8430.2666 -7862.5225 8430.5059 C-7862.6523 8430.3848 -7862.6113 8430.1406 -7862.4575 8430.1162 C-7862.9199 8430.1895 -7863.4141 8430.1563 -7863.8535 8430.082 C-7863.5693 8430.4814 -7864.3433 8430.1758 -7864.1494 8430.5078 C-7863.9141 8430.5977 -7863.7119 8430.8818 -7863.8418 8431.0605 C-7863.9888 8431.0352 -7863.8369 8430.8857 -7863.8984 8430.8008 C-7864.0859 8431.0186 -7864.1895 8430.4512 -7864.3735 8430.7949 C-7863.9512 8430.666 -7864.2915 8430.3086 -7864.2139 8429.9961 C-7864.5186 8430.1719 -7864.2007 8429.7734 -7864.5024 8429.7734 C-7864.8057 8429.9473 -7865.1787 8430.084 -7865.5161 8430.1514 C-7865.9399 8429.8555 -7866.5898 8430.1465 -7866.9683 8430.1582 C-7867.1665 8430 -7867.0322 8429.6465 -7867.2471 8429.585 C-7867.4995 8429.5918 -7867.0601 8429.9658 -7867.4336 8429.8047 C-7867.3975 8429.7344 L-7867.5107 8429.8154 -7868.0825 8429.4941 -7868.1929 8430.002 C-7868.0776 8429.6191 L-7868.1475 8429.584 -7868.2119 8429.6719 -7868.2695 8429.7129 C-7868.2725 8429.5879 -7868.3535 8429.4746 -7868.2402 8429.3926 C-7868.4707 8429.1289 -7868.7241 8429.4346 -7868.9746 8429.4453 C-7868.8135 8429.6719 L-7869.2422 8429.8496 -7869.5293 8429.625 -7869.9443 8429.7041 C-7869.9316 8429.4824 L-7870.1787 8429.6152 L-7870.1182 8429.3994 -7870.3447 8429.2617 -7870.4751 8429.4414 C-7869.8335 8428.8984 L-7869.6553 8429.0293 -7870.0283 8429.166 -7869.9165 8429.3848 C-7869.8213 8429.5762 -7869.4375 8429.5146 -7869.3755 8429.3018 C-7869.5225 8429.2773 -7869.5293 8429.3262 -7869.6436 8429.4063 C-7869.6919 8429.0977 -7869.4688 8429.1094 -7869.3584 8428.9033 C-7869.4355 8428.916 -7869.5449 8428.8223 -7869.5615 8428.9199 C-7869.4102 8428.7695 -7869.2578 8428.7461 -7869.0059 8428.7383 C-7869.1763 8428.8594 -7868.9131 8428.9297 -7868.9775 8429.0176 C-7868.9575 8428.7461 -7868.7168 8428.6621 -7868.4053 8428.7383 C-7868.1831 8429.0527 -7867.8208 8428.5361 -7867.46 8428.623 C-7867.6064 8428.8984 -7867.7935 8429.1191 -7868.0127 8429.2305 C-7867.7861 8429.3682 -7867.7607 8429.2227 -7867.5337 8429.3613 C-7867.4238 8429.1563 -7867.3457 8428.8418 -7867.0503 8428.7168 C-7867.0342 8428.9199 L-7866.7666 8428.8154 -7866.7666 8428.5146 -7866.4258 8428.5723 C-7865.8418 8428.6719 -7865.2407 8428.6719 -7864.7949 8428.6973 C-7864.7783 8428.8994 L-7864.5303 8428.4658 -7863.9521 8428.7393 -7863.6182 8428.5469 C-7863.0503 8428.7422 -7862.3848 8428.3535 -7862.0938 8428.7031 C-7861.0913 8428.5469 -7860.2148 8428.3945 -7859.1768 8428.4688 C-7859.3516 8428.7637 L-7859.1655 8428.5469 -7859.2305 8428.9336 -7859.0479 8428.8896 C-7859.2578 8428.6543 -7858.7949 8428.584 -7858.6665 8428.4033 C-7858.2041 8428.6328 -7857.6104 8428.3818 -7857.2007 8428.1758 C-7857.1846 8428.3789 L-7856.7705 8427.998 -7856.2759 8428.332 -7855.7598 8428.3945 C-7855.7007 8428.4785 -7855.6074 8428.6689 -7855.4536 8428.6465 C-7855.1738 8428.3184 -7855.0273 8428.3418 -7854.6167 8428.1367 C-7854.3169 8428.1367 -7853.8301 8428.2178 -7853.5254 8428.3457 C-7852.3975 8427.8848 -7851.2456 8428.1797 -7850.0732 8427.9023 C-7849.9888 8428.1406 L-7848.8521 8427.6309 -7847.4541 8428.0938 -7846.4839 8427.832 C-7846.5776 8428.2393 L-7846.2734 8428.3643 -7845.8843 8428.1328 -7845.9619 8427.8438 C-7845.6567 8427.9688 -7845.2007 8427.6465 -7845.0068 8427.9814 C-7844.6953 8428.0566 -7844.6255 8427.793 -7844.3662 8427.7383 C-7843.7422 8427.8926 -7843.5107 8427.8574 -7842.9224 8427.7813 C-7843.0684 8427.7559 L-7843.1328 8427.8457 -7843.1387 8428.0186 -7842.9922 8428.0449 C-7842.7725 8427.9307 -7842.1846 8428.1543 -7842.4033 8427.668 C-7841.7754 8427.9482 -7840.9385 8427.4395 -7840.3271 8427.8184 C-7840.3789 8427.6855 -7840.2246 8427.6602 -7840.1602 8427.5703 C-7839.6089 8427.5645 -7839.0293 8427.8359 -7838.5898 8427.6094 C-7838.5024 8427.6758 -7838.7295 8427.8359 -7838.5049 8427.8496 C-7838.3721 8427.7979 -7838.5024 8427.6758 -7838.3384 8427.6016 C-7837.4453 8427.3535 -7836.5303 8427.8574 -7835.7188 8427.793 C-7834.2754 8427.5361 -7832.7695 8427.666 -7831.3867 8427.623 C-7831.4023 8427.7207 L-7830.9395 8427.3477 -7830.3159 8428.1025 -7829.9463 8427.541 C-7829.8369 8427.6338 -7829.5283 8427.585 -7829.6094 8427.7734 C-7829.2407 8427.5098 -7828.5771 8428.0215 -7828.0439 8427.6865 C-7828.0928 8427.6777 -7828.1211 8427.6973 -7828.1777 8427.7393 C-7827.6392 8427.9551 -7827.1641 8427.6602 -7826.5957 8427.8555 C-7826.6533 8427.8975 -7826.7583 8427.9277 -7826.7754 8428.0254 C-7826.5557 8428.2129 -7826.2549 8427.6133 -7826.1348 8428.084 C-7826.0088 8428.0801 -7826.0449 8427.8477 -7826.1221 8427.8613 C-7824.8779 8428.0449 -7823.5498 8427.7441 -7822.2549 8427.6367 C-7821.3271 8427.918 -7822.1982 8428.4297 -7821.4663 8428.0781 C-7821.4063 8428.1689 -7821.4229 8427.8984 -7821.4131 8427.9961 C-7821.1299 8427.8643 -7820.9717 8428.5215 -7820.7754 8428.2754 C-7820.8564 8427.9863 -7820.6445 8428.1133 -7820.6387 8427.9375 C-7820.0713 8428.125 -7819.9575 8428.3857 -7819.5098 8428.166 C-7819.5435 8428.3184 L-7819.0186 8427.8887 -7818.4102 8428.1191 -7817.9673 8427.623 C-7815.0728 8427.5322 -7812.2983 8427.2578 -7809.4761 8427.2002 C-7806.6865 8427.2949 -7803.9551 8427.0723 -7801.1221 8427.3359 C-7800.4585 8427.7354 -7800.4087 8427.7246 -7799.6797 8427.5625 C-7799.7095 8427.627 -7799.7549 8427.6426 -7799.7061 8427.7031 C-7799.6699 8427.375 -7799.1929 8427.6719 -7799.1235 8427.3594 C-7798.0762 8427.4199 -7797.1113 8427.3301 -7796.0337 8427.3281 C-7796.2041 8427.3633 -7796.2896 8427.6309 -7796.0869 8427.6094 C-7795.8755 8427.3994 L-7795.8408 8427.4922 L-7795.7021 8427.4434 -7795.5513 8427.2813 -7795.6943 8427.1758 C-7792.9873 8426.8926 -7790.3242 8427.5498 -7787.6729 8427.4697 C-7787.0435 8427.6064 -7786.1475 8427.4814 -7785.4629 8427.4141 C-7783.4355 8427.8506 -7781.6079 8428.2041 -7779.5479 8427.8984 C-7779.8169 8428.7461 -7780.6675 8428.9414 Vf-7870.7578 8428.7422 m-7870.6855 8428.9063 -7870.4497 8428.9961 -7870.6377 8429.2139 C-7870.6611 8429.0605 -7870.7822 8428.8887 -7870.7578 8428.7422 Cf-7864.4619 8430.4297 m-7864.4536 8430.3809 -7864.3721 8430.4961 -7864.3521 8430.5225 C-7864.4297 8430.5352 -7864.5024 8430.6729 -7864.5645 8430.5879 C-7864.4854 8430.5762 -7864.4976 8430.498 -7864.4619 8430.4297 Cf-7862.8521 8430.5273 m-7862.8765 8430.6729 -7863.2207 8430.7891 -7863.4238 8430.8066 C-7862.8521 8430.5273 Lf-7861.3521 8431.1289 m-7861.2227 8431.252 -7861.2583 8431.3193 -7861.4326 8431.3154 C-7861.4453 8431.2383 -7861.3877 8431.1992 -7861.3521 8431.1289 Cf-7861.2456 8430.7969 m-7861.1211 8430.793 -7861.0591 8430.8789 -7860.9985 8430.9629 C-7861.0029 8430.8369 -7861.2871 8431.041 -7861.2456 8430.7969 Cf-7857.9893 8431.2207 m-7857.9111 8431.209 -7857.7417 8431.0879 -7857.6689 8431.25 C-7857.7505 8431.1367 -7858.0498 8431.4346 -7857.9893 8431.2207 Cf-7856.4761 8431 m-7856.4272 8431.0098 -7856.4072 8431.0361 -7856.3506 8430.9961 C-7856.2607 8431.0625 -7856.3555 8431.1689 -7856.4312 8431.1826 C-7856.4761 8431 Lf-7828.9287 8430.4141 m-7829.0923 8430.4863 L-7829.0684 8430.3418 L-7828.9287 8430.4141 Lf-7816.8574 8430.4063 m-7816.6943 8430.3145 -7816.7441 8430.543 -7816.7168 8430.5645 C-7816.8643 8430.5801 -7816.6621 8430.3848 -7816.8574 8430.4063 Cf-7810.3486 8429.6777 m-7810.3984 8429.6816 L-7810.3818 8429.3818 L-7810.3486 8429.6777 LfU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 3)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7871.5 8429.5273 m-7657.5361 8429.5273 L-7657.5361 8378.7266 L-7871.5 8378.7266 L-7871.5 8429.5273 Lnu0 R0.742188 0.980469 0.007813 0.003906 K1 J 3 w-7855.3838 8413.0879 m-7855.3838 8420.4658 l-7838.9268 8427.2832 l-7838.9268 8418.8281 lS1 Ap0 O0.019531 0.992188 0.972656 0 k0 J-7863.1016 8402.9727 m-7863.1016 8407.2871 -7864.6455 8410.7842 -7866.5508 8410.7842 c-7868.4561 8410.7842 -7870 8407.2871 -7870 8402.9727 c-7870 8398.6582 -7868.4561 8395.1602 -7866.5508 8395.1602 c-7864.6455 8395.1602 -7863.1016 8398.6582 -7863.1016 8402.9727 cbu0 Ap0.144531 1 1 0.046875 k1 w-7862.1484 8401.7461 m-7865.5508 8401.752 L-7868.9541 8401.7617 L-7868.9814 8402.1582 -7869 8402.5605 -7869 8402.9727 c-7869 8402.9766 -7869 8402.9785 -7869 8402.9824 C-7865.5508 8403.709 L-7862.1631 8404.4209 L-7819.1699 8413.4727 L-7819.1699 8401.6445 L-7862.1484 8401.7461 Lf0.019531 0.992188 0.972656 0 k-7862.5439 8399.1504 m-7865.5508 8399.7969 L-7868.8213 8400.502 L-7868.8809 8400.9082 -7868.9248 8401.3301 -7868.9541 8401.7617 C-7865.5508 8401.752 L-7862.1484 8401.7461 L-7819.1699 8401.6445 L-7819.1699 8389.8047 L-7862.5439 8399.1504 Lf0.234375 1 1 0.179688 k-7862.1631 8404.4209 m-7865.5508 8403.709 L-7869 8402.9824 L-7868.9971 8407.293 -7867.4551 8410.7842 -7865.5508 8410.7842 c-7865.0303 8410.7842 -7864.5391 8410.5176 -7864.0967 8410.0488 C-7819.1699 8425.7168 L-7819.1699 8413.4727 L-7862.1631 8404.4209 Lf0.003906 0.816406 0.585938 0 k-7864.0547 8395.9414 m-7864.5078 8395.4453 -7865.0137 8395.1602 -7865.5508 8395.1602 c-7867.0742 8395.1602 -7868.3643 8397.3984 -7868.8213 8400.502 C-7865.5508 8399.7969 L-7862.5439 8399.1504 L-7819.1699 8389.8047 L-7819.1699 8380.2266 L-7864.0547 8395.9414 LfU1 Ap0.695313 0.671875 0.636719 0.738281 k0 R0.742188 0.980469 0.007813 0.003906 K3 w-7819.1699 8380.2266 m-7813.6235 8380.2266 -7809.1279 8390.4102 -7809.1279 8402.9727 c-7809.1279 8415.5352 -7813.6235 8425.7168 -7819.1699 8425.7168 c-7824.7158 8425.7168 -7829.2109 8415.5352 -7829.2109 8402.9727 c-7829.2109 8390.4102 -7824.7158 8380.2266 -7819.1699 8380.2266 cBu0 Ap0.664063 0 0.347656 0 k1 w-7657.6758 8383.9697 m-7694.0205 8393.5303 -7765.8193 8379.2686 -7802.4155 8379.8994 C-7804.4775 8380.0723 -7805.5117 8380.1914 -7807.5742 8380.501 c-7809.6367 8380.8096 -7810.6675 8380.998 -7812.7295 8381.458 c-7814.7925 8381.917 -7815.8223 8382.1846 -7817.8848 8382.8105 c-7818.2021 8382.9063 -7818.7109 8383.0723 -7819.3154 8383.2754 c-7820.5088 8383.6738 -7822.0908 8384.2207 -7823.4268 8384.6865 C-7825.9072 8388.2354 -7827.8555 8394.8018 -7827.8555 8403.0322 c-7827.8555 8411.7031 -7825.6973 8418.5488 -7823.0283 8421.9434 C-7821.9346 8421.6641 -7820.4951 8421.3887 -7819.3154 8421.1309 c-7818.7529 8421.0098 -7818.2515 8420.8906 -7817.8848 8420.7793 c-7815.8223 8420.1553 -7814.7925 8419.8857 -7812.7295 8419.4258 c-7810.6675 8418.9658 -7809.6367 8418.7793 -7807.5742 8418.4697 c-7805.5117 8418.1602 -7804.4775 8418.042 -7802.4155 8417.8682 C-7765.8193 8417.2354 -7694.0205 8431.5 -7657.6758 8421.9395 C-7666.0762 8417.3857 -7670.2754 8414.2617 -7678.6758 8407.1738 C-7671.1045 8399.8818 -7664.3809 8392.0498 -7657.6758 8383.9697 CfUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 5)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7871.5 8431.5 m-7647.7979 8431.5 L-7647.7979 8388.123 L-7871.5 8388.123 L-7871.5 8431.5 Lnu0 O0.742188 0.980469 0.007813 0.003906 k-7871.5 8431.5 m-7822.5986 8431.5 L-7829.1279 8428.708 L-7849.4326 8420.0273 L-7849.4326 8403.9482 L-7849.4326 8401.3193 L-7871.5 8401.3193 L-7868.9033 8403.9482 L-7855.9404 8417.0674 L-7868.7705 8428.708 L-7871.5 8431.5 Lf0.621094 0.847656 0 0 k-7849.4316 8388.123 m-7849.4316 8391.3506 L-7849.4316 8416.5449 L-7849.4316 8420.0273 L-7669.8662 8420.0273 L-7669.8662 8416.5449 L-7669.8662 8391.3506 L-7669.8662 8388.123 L-7849.4316 8388.123 Lf0.742188 0.980469 0.007813 0.003906 k-7663.3584 8417.0674 m-7650.3965 8403.9482 L-7647.7979 8401.3193 L-7669.8662 8401.3193 L-7669.8662 8403.9482 L-7669.8662 8420.0273 L-7690.1709 8428.708 L-7696.7002 8431.5 L-7647.7979 8431.5 L-7650.5283 8428.708 L-7663.3584 8417.0674 Lf-7822.5986 8431.5 m-7849.4326 8420.0273 LNu0 O0.847656 1 0.261719 0.160156 k-7677.0215 8420.0273 m-7696.7002 8420.0273 L-7696.7002 8428.4395 L-7696.7002 8431.5 L-7669.8662 8420.0273 L-7677.0215 8420.0273 Lf-7849.4326 8420.0273 m-7822.5986 8431.5 L-7822.5986 8428.4395 L-7822.5986 8420.0273 L-7842.2764 8420.0273 L-7849.4326 8420.0273 LfUUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 2 pt. Oval/ Adobe Calligraphic) -( Brush Tool/ 5 pt. Oval/ Adobe Calligraphic Brush Tool/ 3 pt. ) -(Flat/ Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe Calligr) -(aphic Brush Tool/ 3 pt. Round/ Adobe Calligraphic Brush Tool/ ) -(7 pt. Round/ Adobe ArtOnPath Brush Tool/ Charcoal/ Adobe ArtOn) -(Path Brush Tool/ Pencil - Thin/ Adobe ArtOnPath Brush Tool/ Ba) -(nner 1/ Adobe ArtOnPath Brush Tool/ Banner 2/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(2 pt. Oval)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Flat)(1 3 3 9 9 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(3 pt. Round)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Oval)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(7 pt. Round)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner 1)(1 / Unnamed Brush Pat 5/ / / / / 5 0.47451 0.278431 0.623529 /) -(  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner 2)(1 / Unnamed Brush Pat 3/ / / / / 5 0.25098 0.74902 0.713726 / ) -( 1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 2/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Pencil - Thin)(1 / Unnamed 18/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0.490005 0 1 0.389999 (PANTONE 576 C) 0 x(PANTONE 576 C)Pc0.95 0.09 0 0.83 (PANTONE 546 C) 0 x(PANTONE 546 C)PcBb0 0 0 0 Bh2 (New Gradient Swatch 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(New Gradient Swatch 1)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 Au0 O0 0 0 0 k0 J 0 j 1 w 4 M []0 d0 XR292.0547 272.2104 m298.7266 277.7065 305.4932 276.3965 317.3379 269.7202 c331.4932 261.7246 346.6973 261.2964 356.9844 272.8643 c357.1836 274.3984 357.2969 275.9585 357.2969 277.5483 c357.2969 297.4585 341.1543 313.5996 321.2441 313.5996 c301.3335 313.5996 285.1938 297.4585 285.1938 277.5483 c285.1938 273.1924 285.9648 269.0195 287.3799 265.1533 c287.1777 268.1636 289.2695 269.9155 292.0547 272.2104 CFUu0.95 0.09 0 0.83 (PANTONE 546 C) 0 x292.0547 272.2104 m298.7266 277.7065 305.4932 276.3965 317.3379 269.7202 c331.4932 261.7246 346.6973 261.2964 356.9844 272.8643 c357.1836 274.3984 357.2969 275.9585 357.2969 277.5483 c357.2969 297.4585 341.1543 313.5996 321.2441 313.5996 c301.3335 313.5996 285.1938 297.4585 285.1938 277.5483 c285.1938 273.1924 285.9648 269.0195 287.3799 265.1533 c287.1777 268.1636 289.2695 269.9155 292.0547 272.2104 CFU349.5859 252.9292 m345.8594 248.4761 341.3086 245.1182 336.3418 242.8901 C332.4785 229.4844 L325.4902 239.8984 l322.4219 239.5342 319.3105 239.5503 316.2314 239.9561 C309.2012 229.4844 L305.4512 243.0874 l302.5718 244.4272 299.8169 246.1543 297.2671 248.2881 c295.3809 249.8682 293.6938 251.5991 292.2031 253.4434 c292.1147 253.5645 292.043 253.6851 291.957 253.8081 C305.9531 208.3574 L311.9121 208.3574 L320.9238 228.9629 L329.7188 208.3574 L335.627 208.3574 L349.6641 253.0254 l349.5859 252.9292 Lf*u1 D0.490005 0 1 0.389999 (PANTONE 576 C) 0 x349.2285 269.1987 m348.2949 269.6655 347.7363 270.6924 347.457 271.6245 c347.1777 272.5586 346.0566 273.2104 345.123 273.4897 c344.1914 273.7686 343.5371 274.5176 343.2588 274.9814 c342.9805 275.4487 342.6055 275.8218 341.9512 275.8218 c341.2988 275.8218 340.3652 275.7275 339.9004 276.0078 c339.4336 276.2886 339.3428 277.1284 337.4746 276.3804 c335.6094 275.6348 335.5156 275.4487 334.7695 275.6348 c334.0234 275.8218 333.8379 276.3804 333.5586 276.4746 c333.2793 276.5674 331.7871 276.6616 331.5977 277.0347 c331.4102 277.4077 331.5059 279.2725 330.9453 279.5547 c330.3848 279.8335 328.7988 280.2988 328.707 280.8584 c328.6133 281.4194 328.8945 283.0034 328.334 283.0034 c327.7734 283.0034 326.4688 282.5386 326.002 282.0718 c325.5352 281.6045 325.5352 280.9526 324.8809 281.3257 c324.2305 281.6987 322.1777 283.1904 323.0176 285.5225 c323.8574 287.8545 325.2539 288.6943 327.959 288.0425 c330.666 287.3887 331.0391 287.2026 331.1309 286.6426 c331.2246 286.0815 332.0645 284.4038 332.1582 285.2437 c332.25 286.0815 331.4102 288.6943 331.8789 289.3477 c332.3438 289.9995 333.2793 290.8398 333.5586 291.5854 c333.8379 292.3315 334.4902 295.0366 334.8652 295.7827 c335.2363 296.5308 334.584 296.4365 335.2363 296.5308 c335.8906 296.6226 335.4219 296.8105 335.8906 296.9956 c336.3555 297.1836 337.1953 297.3687 336.916 297.9297 c336.6367 298.4878 336.4492 299.0488 335.8906 299.3276 c335.3301 299.6064 335.1445 299.8887 Y337.2891 301.1924 l337.0088 301.5654 335.1445 302.7808 334.6758 303.2466 c334.2109 303.7114 332.4395 304.9248 331.7871 304.9248 c331.1309 304.9248 329.4531 305.2979 329.0801 304.9248 c328.707 304.5518 329.3594 303.5264 329.3594 303.1523 c329.3594 302.7783 329.6406 301.8477 329.3594 301.4746 c329.0801 301.1016 329.5449 301.1016 329.0801 301.1016 c328.6133 301.1016 326.6543 302.7808 326.2813 303.0596 c325.9082 303.3374 324.8809 303.6187 324.7891 304.4575 c324.6953 305.2979 325.0703 305.6704 325.5352 306.5107 c326.002 307.3506 326.5625 307.7236 325.7227 307.9106 c324.8809 308.0967 324.043 308.0967 323.2969 308.0967 c322.5508 308.0967 320.4063 308.5635 319.8477 308.7485 c319.2852 308.9355 317.3262 309.5874 316.207 309.7754 c315.0879 309.9614 314.4355 311.0806 313.4102 310.8008 c312.3848 310.5225 311.4512 310.5225 310.8906 310.1484 c310.3301 309.7754 309.7715 309.6816 309.2109 309.5874 c309.1191 309.3096 308.3711 309.0283 v307.627 308.7485 306.2285 308.8418 306.041 308.1895 c305.8535 307.5376 305.2935 307.6284 304.8281 307.0708 c304.3613 306.5107 303.8003 306.2314 305.3887 306.4165 c306.9746 306.6055 308.0918 307.2559 308.6523 307.4434 c309.2109 307.6284 308.5586 308.3755 309.2109 307.6284 c309.8652 306.8828 310.2383 306.7896 310.1445 306.4165 c310.0508 306.0435 309.957 305.6704 310.0508 305.2046 c310.1445 304.7378 310.4238 305.1113 310.4238 303.8994 C310.4238 302.3115 l311.1699 301.8477 311.543 301.7534 v311.916 301.6597 312.291 300.9136 y312.291 300.7275 312.1035 299.9814 v311.916 299.2334 311.2637 296.5308 311.2637 295.8765 c311.2637 295.2246 310.8906 293.4507 311.2637 292.7988 c311.6367 292.1455 312.4766 290.0957 312.6641 289.4404 c312.8516 288.7866 313.4102 287.2026 313.6895 286.9214 c313.9688 286.6426 315.1816 286.1758 315.4609 285.4316 c315.7402 284.6855 316.6738 283.6558 316.582 284.4956 c316.4883 285.3374 316.0215 287.0156 315.5547 287.3887 c315.0879 287.7617 314.3418 289.9995 314.623 290.1865 c314.9023 290.3726 316.3008 288.5078 316.582 287.9487 c316.8613 287.3887 317.8867 285.6147 318.3535 284.6855 c318.8203 283.7495 319.2852 281.8848 319.5664 281.2314 c319.8477 280.5796 322.457 278.9937 323.2051 278.5264 c323.9492 278.0596 325.5352 277.4077 327.0293 277.0347 c328.5195 276.6616 329.8262 275.8218 330.5723 275.4487 c331.3184 275.0757 332.0645 274.3296 332.625 273.9565 c333.1836 273.5835 333.8359 273.5835 334.3027 273.5835 c334.7695 273.5835 334.4902 274.4214 335.3301 273.3047 c336.1699 272.1836 335.7031 271.7188 335.3301 271.1577 c334.9551 270.5996 333.0918 266.8667 332.9961 265.9346 c332.959 265.5508 333.084 264.8296 333.3027 264.0308 c339.2988 263.2925 345.082 264.2148 350.1953 267.1455 c349.9492 267.6846 349.9766 268.8257 349.2285 269.1987 CF325.2305 308.8154 m325.6973 308.4634 325.4063 308.3477 326.6934 308.1714 c327.9824 307.9966 328.627 308.1138 328.7441 307.6445 c328.8613 307.1758 328.041 307.3525 328.1582 306.9424 c328.2754 306.5327 328.5098 306.4146 329.623 306.1797 c330.7363 305.9468 332.2598 305.0078 331.9063 305.6533 c331.5527 306.2964 331.3203 306.7666 331.2051 307.1177 c331.0859 307.4697 329.7383 308.1714 328.8613 308.6406 c327.9824 309.1094 327.0449 309.5186 326.3418 309.5186 c325.6387 309.5186 324.4688 310.1636 324.1172 309.6943 c323.75 309.2056 324.7617 309.1665 325.2305 308.8154 CF333.0859 283.9507 m332.6797 284.0693 332.0059 284.1406 331.7402 284.3975 c331.4727 284.6558 331.0449 284.7637 330.8477 284.7334 c330.4063 284.6675 330.0742 284.6855 330.0352 284.4775 c329.9961 284.2686 329.6699 284.1304 330.125 283.8628 c330.5801 283.5938 330.918 283.5654 331.5313 283.4058 c332.1465 283.2495 332.541 282.9814 332.7988 282.8047 c333.0566 282.6245 333.4531 282.6943 333.6406 282.8135 c333.8281 282.9316 334.0859 283.1694 333.8281 283.3687 c333.5723 283.5654 333.4941 283.8315 333.0859 283.9507 CF330.793 309.5776 m331.2617 309.1665 332.2598 308.3477 332.4941 307.9375 c332.7266 307.5273 332.5508 307.5273 333.7227 306.9424 c334.8945 306.3564 335.127 305.6533 335.8906 305.7705 c336.6504 305.8877 336.8848 306.2397 336.3574 306.7065 c335.832 307.1758 335.5977 308.4067 335.127 308.9326 c334.6582 309.4595 332.9609 310.7476 332.0234 310.9834 c331.0859 311.2168 329.0938 311.8613 328.3926 311.9194 c327.6895 311.9785 326.9277 311.9194 326.752 311.5684 c326.5762 311.2168 326.5762 311.4517 326.5762 311.2168 c326.5762 310.6406 330.3242 309.9878 330.793 309.5776 CF338.2324 298.6245 m338.8184 298.5078 339.7559 297.8628 339.2871 298.8008 c338.8184 299.7378 338.6445 299.8545 338.4648 299.9136 c337.9102 300.0996 337.2949 299.9727 337.2949 299.6206 c337.2949 299.2686 337.6465 298.7417 338.2324 298.6245 CF336.7793 282.8726 m336.5918 282.7925 335.957 282.5996 335.9277 282.3955 c335.8984 282.1797 336.3535 282.2085 336.8008 282.1187 c337.2441 282.0308 338.0176 282.0508 338.2461 282.0596 c338.4727 282.0693 338.5527 282.1084 338.6621 282.2188 c338.7715 282.3276 338.6523 282.5566 338.5332 282.7437 c338.4141 282.9316 337.8301 283.0693 337.582 283.1694 c337.334 283.2686 336.9678 282.9507 336.7793 282.8726 CF*U0 D317.6914 267.6245 m306.1738 274.1265 298.5415 275.7695 292.0825 270.4688 c290.1426 268.8745 289.5513 267.5034 288.8862 265.8027 C288.9316 265.8066 l295.3286 266.5503 300.7935 264.2944 311.4805 256.4355 c325.1035 246.4175 335.6875 251.8257 337.916 253.7354 c340.4336 255.8945 342.541 258.2554 y340.9004 255.2314 337.916 252.9316 v335.3398 250.9443 325.3184 245.5547 311.2246 255.0854 c309.3672 256.3413 307.6055 257.4136 305.9336 258.3237 c304.7246 259.0938 297.1582 263.7437 291.5435 263.3477 c288.0293 263.1016 287.8843 262.5098 282.1436 261.0737 c277.7866 259.9834 276.4932 262.0244 y276.1533 260.9365 275.2686 260.4604 v274.3833 259.9834 273.9063 259.9155 y274.9966 259.0996 278.7402 259.0996 v281.9263 259.0996 284.8223 261.2144 288.9282 261.8457 c289.4512 260.1924 290.5474 258.1865 292.4204 255.6167 c293.9023 253.7847 295.5762 252.0635 297.4512 250.4956 c313.0781 237.416 337.0664 238.9102 349.4297 255.1045 c354.1211 261.2554 355.4434 264.3413 356.6211 270.9077 c346.6758 258.8545 331.7969 259.6387 317.6914 267.6245 CF283.7324 200.4473 m284.7813 200.4473 L284.7813 196.3076 l284.7813 195.75 284.7402 195.3281 284.6582 195.041 c284.5762 194.7578 284.4746 194.5186 284.3555 194.3301 c284.2354 194.1396 284.0874 193.9717 283.9155 193.8223 c283.3364 193.3242 282.5835 193.0762 281.6514 193.0762 c280.7026 193.0762 279.9404 193.3223 279.3672 193.8164 c279.1934 193.9697 279.0464 194.1396 278.9263 194.3301 c278.8066 194.5186 278.7075 194.752 278.6294 195.0273 c278.5503 195.3008 278.5122 195.7324 278.5122 196.3203 C278.5122 200.4473 L279.5596 200.4473 L279.5596 196.3076 l279.5596 195.625 279.6387 195.1484 279.7944 194.8809 c279.9512 194.6133 280.1895 194.3984 280.5093 194.2363 c280.8296 194.0742 281.2065 193.9941 281.6416 193.9941 c282.2593 193.9941 282.7637 194.1563 283.1533 194.4785 c283.3574 194.6543 283.5054 194.8574 283.5977 195.0947 c283.6875 195.332 283.7324 195.7363 283.7324 196.3076 c283.7324 200.4473 Lf293.1367 200.4473 m294.127 200.4473 L294.127 193.1602 L293.2305 193.1602 L288.3599 198.7715 L288.3599 193.1602 L287.3789 193.1602 L287.3789 200.4473 L288.2227 200.4473 L293.1367 194.7871 l293.1367 200.4473 Lf296.8188 200.4453 m297.8618 200.4453 L297.8618 193.1602 L296.8188 193.1602 l296.8188 200.4453 Lf305.2148 200.4473 m306.2539 200.4473 L303.1738 193.1289 L302.938 193.1289 L299.7969 200.4473 L300.8457 200.4473 L303.0376 195.3301 l305.2148 200.4473 Lf308.1738 200.4473 m312.3047 200.4473 L312.3047 199.5166 L309.2168 199.5166 L309.2168 197.2949 L312.2012 197.2949 L312.2012 196.3613 L309.2168 196.3613 L309.2168 194.0986 L312.4023 194.0986 L312.4023 193.1699 L308.1738 193.1699 l308.1738 200.4473 Lfu*u1 D316.0234 199.5576 m315.7109 199.5576 L315.7109 197.2598 L316.1074 197.2598 l316.6348 197.2598 316.998 197.3047 317.1953 197.3936 c317.3906 197.4844 317.5449 197.6211 317.6543 197.8047 c317.7637 197.9863 317.8184 198.1934 317.8184 198.4277 c317.8184 198.6582 317.7578 198.8652 317.6348 199.0508 c317.5137 199.2363 317.3418 199.3691 317.1211 199.4453 c316.9004 199.5205 316.5352 199.5576 316.0234 199.5576 CF0 D314.668 193.1602 m314.668 200.4473 L316.4922 200.4473 l317.2314 200.4473 317.8145 200.2637 318.248 199.8955 c318.6816 199.5332 318.8975 199.041 318.8975 198.416 c318.8975 197.9941 318.791 197.627 318.5801 197.3164 c318.3672 197.0078 318.0635 196.7754 317.668 196.623 c317.9004 196.4688 318.127 196.2598 318.3496 195.998 c318.5723 195.7295 318.8848 195.2705 319.2891 194.6152 c319.543 194.2012 319.7461 193.8887 319.8984 193.6807 C320.2852 193.1602 L319.043 193.1602 L318.7246 193.6396 L318.6641 193.7275 L318.4609 194.0146 L318.1367 194.5488 L317.7891 195.1172 l317.5723 195.416 317.375 195.6543 317.1973 195.832 c317.0156 196.0078 316.8564 196.1348 316.7109 196.2129 c316.5664 196.293 316.3242 196.3301 315.9824 196.3301 C315.7109 196.3301 L315.7109 193.1602 l314.668 193.1602 Lf*U324.0137 196.2129 m323.2207 196.6943 l322.7246 196.9961 322.3691 197.2969 322.1602 197.5898 c321.9502 197.8828 321.8438 198.2207 321.8438 198.6055 c321.8438 199.1777 322.043 199.6445 322.4414 200.002 c322.8379 200.3604 323.3574 200.5391 323.9932 200.5391 c324.6016 200.5391 325.1602 200.3682 325.666 200.0264 C325.666 198.8438 l325.1406 199.3477 324.5771 199.6016 323.9727 199.6016 c323.6309 199.6016 323.3516 199.5234 323.1328 199.3623 c322.9141 199.207 322.8047 199.0059 322.8047 198.7578 c322.8047 198.541 322.8848 198.3359 323.0449 198.1465 c323.207 197.9551 323.4668 197.7559 323.8252 197.5449 C324.6191 197.0732 l325.5098 196.543 325.9531 195.8662 325.9531 195.0469 c325.9531 194.4648 325.7578 193.9873 325.3682 193.623 c324.9766 193.2578 324.4668 193.0752 323.8418 193.0752 c323.123 193.0752 322.4668 193.2969 321.875 193.7393 C321.875 195.0645 l322.4395 194.3516 323.0898 193.9932 323.8301 193.9932 c324.1592 193.9932 324.4316 194.084 324.6484 194.2676 c324.8652 194.4482 324.9746 194.6758 324.9746 194.9502 c324.9746 195.3945 324.6523 195.8145 324.0137 196.2129 CFU328.2344 200.4453 m329.2773 200.4453 L329.2773 193.1602 L328.2344 193.1602 l328.2344 200.4453 Lf331.3945 200.457 m337.4824 200.457 L337.4824 199.5264 L334.9414 199.5264 L334.9414 193.1602 L333.8926 193.1602 L333.8926 199.5264 L331.3945 199.5264 l331.3945 200.457 Lf343.9707 200.4473 m345.2363 200.4473 L342.5449 197.0146 L342.5449 193.1602 L341.4766 193.1602 L341.4766 197.0146 L338.7852 200.4473 L340.0449 200.4473 L341.9941 197.9326 l343.9707 200.4473 Lfu*u1 D354.8672 199.5586 m354.0332 199.5586 353.3496 199.2988 352.8125 198.7773 c352.2754 198.2559 352.0059 197.5898 352.0059 196.7793 c352.0059 195.9912 352.2754 195.3398 352.8145 194.8184 c353.3535 194.2969 354.0273 194.0342 354.8359 194.0342 c355.6484 194.0342 356.3281 194.3027 356.8711 194.834 c357.4141 195.3643 357.6875 196.0273 357.6875 196.8203 c357.6875 197.5918 357.4141 198.2412 356.8711 198.7695 c356.3281 199.2949 355.6602 199.5586 354.8672 199.5586 CF0 D354.8262 200.5508 m355.9512 200.5508 356.8896 200.1934 357.6396 199.4805 c358.3877 198.7676 358.7627 197.875 358.7627 196.8008 c358.7627 195.7266 358.3828 194.8379 357.6289 194.1309 c356.8711 193.4277 355.9199 193.0752 354.7676 193.0752 c353.6699 193.0752 352.7559 193.4277 352.0254 194.1309 c351.293 194.8379 350.9277 195.7188 350.9277 196.7793 c350.9277 197.8662 351.2949 198.7676 352.0313 199.4805 c352.7676 200.1934 353.6992 200.5508 354.8262 200.5508 CF*UU361.1758 200.4473 m365.0625 200.4473 L365.0625 199.5166 L362.2188 199.5166 L362.2188 197.4824 L365.0625 197.4824 L365.0625 196.5537 L362.2188 196.5537 L362.2188 193.1602 L361.1758 193.1602 l361.1758 200.4473 Lfu266.4565 179.9004 m269.3984 187.1426 L272.3125 179.8945 l273.6074 179.9102 274.9106 179.9395 276.2207 179.9785 C280.1934 189.8477 L278.1733 189.8477 L274.3125 180.0898 L270.3677 189.8477 L268.4517 189.8477 L264.5254 180.0898 L260.6235 189.8477 L258.5825 189.8477 L262.5366 179.9941 l263.7363 179.959 265.0903 179.9238 266.4565 179.9004 CF301.8262 181.7109 m301.7725 182.0371 301.7422 182.3711 301.7422 182.7246 c301.7422 184.2656 302.2764 185.5439 303.3472 186.5703 c304.4185 187.5928 305.7656 188.1055 307.3877 188.1055 c308.9668 188.1055 310.584 187.6299 312.2402 186.6875 C312.2402 188.8652 l310.4219 189.6426 308.7715 190.0293 307.2852 190.0293 c305.1294 190.0293 303.3174 189.3262 301.8481 187.9209 c300.3794 186.5176 299.6431 184.7832 299.6431 182.7246 c299.6431 182.3105 299.6895 181.9102 299.7544 181.5137 c300.4453 181.5781 301.1372 181.6445 301.8262 181.7109 CF382.2578 186.1016 m382.2578 189.8477 L380.332 189.8477 L380.332 186.6348 l381.2617 186.4141 381.8945 186.2227 382.2578 186.1016 CF285.0566 180.373 m285.0566 189.8477 L283.0317 189.8477 L283.0317 180.2578 l283.7026 180.2949 284.3809 180.334 285.0566 180.373 CF291.4082 182.5586 m292.9482 181.625 l293.2822 181.418 293.5664 181.207 293.8101 180.9922 c294.6294 181.0586 295.4453 181.125 296.2622 181.1973 c295.8442 181.9922 295.1372 182.6953 294.1294 183.2988 C292.5801 184.2148 l291.8872 184.623 291.3813 185.0098 291.0684 185.3809 c290.7544 185.75 290.5972 186.1475 290.5972 186.5693 c290.5972 187.0488 290.811 187.4404 291.2363 187.748 c291.6611 188.0527 292.2051 188.207 292.8672 188.207 c294.0435 188.207 295.1401 187.7168 296.1602 186.7334 C296.1602 189.0332 l295.1743 189.6973 294.0903 190.0293 292.9082 190.0293 c291.6724 190.0293 290.6685 189.6816 289.894 188.9854 c289.1201 188.291 288.7344 187.3848 288.7344 186.2686 c288.7344 185.5293 288.937 184.873 289.3452 184.3008 c289.7563 183.7285 290.4424 183.1484 291.4082 182.5586 CF317.6406 183.4355 m317.7773 184.6914 318.2813 185.75 319.1621 186.6045 c320.2031 187.6191 321.5352 188.125 323.1543 188.125 c324.6934 188.125 325.9902 187.6123 327.0488 186.5898 c327.6172 186.0371 328.0273 185.4121 328.293 184.7207 c329.0039 184.8066 329.707 184.8926 330.4082 184.9785 c330.0664 186.1123 329.4414 187.1104 328.5371 187.9746 c327.082 189.3564 325.2617 190.0508 323.0742 190.0508 c320.8867 190.0508 319.0781 189.3564 317.6465 187.9746 c316.3223 186.6904 315.6191 185.0938 315.5215 183.1875 c316.2305 183.2695 316.9355 183.3535 317.6406 183.4355 CF364.6992 188.125 m364.6992 189.8477 L362.6719 189.8477 L362.6719 188.0918 l363.3672 188.1104 364.043 188.1211 364.6992 188.125 CF347.6289 186.9766 m347.6289 189.8477 L345.7031 189.8477 L345.7031 186.7734 l346.3535 186.8438 346.9922 186.9102 347.6289 186.9766 CF372.5488 187.8184 m370.7871 189.8467 L369.1465 189.8467 L369.1465 188.0391 l370.3711 187.9844 371.5 187.9082 372.5488 187.8184 CF353.4531 187.5313 m353.5254 187.6074 353.6035 187.6787 353.6973 187.748 c354.123 188.0518 354.666 188.207 355.3281 188.207 c355.9316 188.207 356.5156 188.0723 357.0762 187.8125 c357.5977 187.8486 358.1152 187.8848 358.6211 187.916 C358.6211 189.0332 l357.6348 189.6973 356.5508 190.0293 355.3672 190.0293 c354.1309 190.0293 353.127 189.6807 352.3555 188.9863 c351.8496 188.5313 351.5254 187.9775 351.3516 187.3447 c352.0645 187.4102 352.7617 187.4717 353.4531 187.5313 CF358.6211 187.0918 m358.4883 187.0859 358.3477 187.0771 358.2109 187.0713 c358.3506 186.9609 358.4883 186.8623 358.6211 186.7344 c358.6211 187.0918 Lf336.4238 185.707 m336.4238 186.5938 L337.1191 185.791 l337.9023 185.8848 338.6758 185.9746 339.4434 186.0635 C336.1582 189.8477 L334.5176 189.8477 L334.5176 185.4775 l335.1582 185.5566 335.7891 185.6309 336.4238 185.707 CF356.5879 183.2988 m355.041 184.2148 l354.3457 184.6211 353.8438 185.0088 353.5293 185.3809 c353.2148 185.75 353.0586 186.1484 353.0586 186.5703 C353.0801 186.7607 l352.4727 186.7158 351.8535 186.668 351.2266 186.6191 c351.2168 186.502 351.1934 186.3916 351.1934 186.2686 c351.1934 185.5293 351.3984 184.8711 351.8066 184.3008 c352.2168 183.7285 352.9023 183.1504 353.8672 182.5586 C355.4102 181.623 l356.6523 180.8516 357.2734 180.0352 357.2734 179.1719 c357.2734 178.6406 357.0625 178.1973 356.6406 177.8438 c356.2188 177.4922 355.6895 177.3145 355.0547 177.3145 c353.6172 177.3145 352.3496 178.0078 351.2539 179.3945 C351.2539 176.8193 l352.4023 175.9609 353.6777 175.5313 355.0742 175.5313 c356.291 175.5313 357.2793 175.8848 358.0391 176.5957 c358.7988 177.3047 359.1777 178.2266 359.1777 179.3594 c359.1777 180.9551 358.3145 182.2676 356.5879 183.2988 CF345.7031 186.1289 m345.7031 178.8535 L339.9023 185.5322 l339.1309 185.4502 338.3516 185.3643 337.5664 185.2764 C345.8867 175.6934 L347.6289 175.6934 L347.6289 186.3105 l346.9941 186.252 346.3516 186.1914 345.7031 186.1289 CF380.332 185.4902 m380.332 178.8535 L373.4883 186.7363 l372.2109 186.875 370.7676 186.9902 369.1465 187.0742 C369.1465 175.6934 L371.0527 175.6934 L371.0527 186.5938 L380.5156 175.6934 L382.2578 175.6934 L382.2578 184.7871 l381.9082 184.9531 381.2949 185.207 380.332 185.4902 CF363.4961 187.209 m363.2285 187.209 362.9512 187.207 362.6738 187.2051 C362.6738 175.6934 L364.6992 175.6934 L364.6992 187.2031 l364.3066 187.207 363.9063 187.209 363.4961 187.209 CF334.5176 184.9297 m334.5176 175.6934 L336.4219 175.6934 L336.4219 185.1475 l335.7891 185.0781 335.1563 185.0039 334.5176 184.9297 CF303.3223 178.8945 m302.7271 179.459 302.3062 180.1152 302.0474 180.8555 c301.3521 180.7676 300.6602 180.6816 299.9702 180.5957 c300.1294 180.082 300.332 179.584 300.6064 179.1074 c301.248 177.9922 302.1191 177.1172 303.2202 176.4844 c304.3223 175.8496 305.6641 175.5313 307.2441 175.5313 c309.1895 175.5313 310.9043 175.9375 312.3906 176.7461 C312.3906 178.9766 l310.7559 177.9219 309.082 177.3965 307.3652 177.3965 c305.7246 177.3965 304.375 177.8945 303.3223 178.8945 CF273.1934 177.7051 m274.0264 175.6328 L274.4712 175.6328 L275.3735 177.875 l274.6304 177.8125 273.9043 177.7578 273.1934 177.7051 CF328.4551 184.207 m328.5684 183.7656 328.6328 183.2988 328.6328 182.8047 c328.6328 181.2656 328.1035 179.9775 327.0469 178.9453 c325.9902 177.9121 324.6738 177.3936 323.0938 177.3936 c321.5215 177.3936 320.2129 177.9004 319.168 178.916 c318.1211 179.9277 317.5977 181.1992 317.5977 182.7246 C317.6035 182.8477 l316.9043 182.7578 316.207 182.6699 315.5078 182.5801 c315.541 180.584 316.2461 178.918 317.6309 177.582 c319.0527 176.2148 320.8301 175.5313 322.9629 175.5313 c325.1973 175.5313 327.0488 176.2148 328.5156 177.582 c329.9863 178.9512 330.7188 180.6777 330.7188 182.7656 c330.7188 183.3594 330.6543 183.9219 330.5352 184.4609 c329.8438 184.377 329.1523 184.293 328.4551 184.207 CF283.0303 178.6055 m283.0303 175.6934 L285.0562 175.6934 L285.0562 178.8203 l284.373 178.7461 283.6982 178.6738 283.0303 178.6055 CF294.6387 179.9336 m294.7495 179.6836 294.8125 179.4297 294.8125 179.1719 c294.8125 178.6387 294.6016 178.1973 294.1797 177.8438 c293.7578 177.4922 293.2285 177.3145 292.5938 177.3145 c291.2065 177.3145 289.9819 177.9648 288.9136 179.2559 C288.7949 179.2402 L288.7949 176.8203 l289.9438 175.9609 291.2158 175.5313 292.6157 175.5313 c293.8296 175.5313 294.8188 175.8848 295.5776 176.5957 c296.3379 177.3027 296.7188 178.2266 296.7188 179.3594 c296.7188 179.6426 296.6816 179.9141 296.627 180.1777 c295.9609 180.0957 295.2979 180.0137 294.6387 179.9336 CF264.5225 177.3223 m264.2026 177.3223 263.9004 177.3242 263.6084 177.3262 C264.2876 175.6328 L264.7227 175.6328 L265.4126 177.3301 l265.1094 177.3262 264.8125 177.3223 264.5225 177.3223 CF0.95 0.09 0 0.83 (PANTONE 546 C) 0.2 x363.4961 187.2031 m340.1816 187.2031 285.3262 177.3164 264.522 177.3164 c260.896 177.3164 259.0522 177.4297 258.5903 177.4609 C258.5903 176.9805 l260.3979 176.8262 264.6382 176.8262 v285.416 176.8262 340.2051 186.7012 363.4941 186.7012 c378.6621 186.7012 382.6094 184.0801 Y382.6094 184.5957 l382.2656 184.8047 378.0234 187.2031 363.4961 187.2031 CF0.490005 0 1 0.389999 (PANTONE 576 C) 0 x263.2397 164.8125 m263.7676 165.1289 l264.1396 164.4453 264.5688 164.1035 265.0557 164.1035 c265.2637 164.1035 265.46 164.1504 265.6426 164.248 c265.8257 164.3457 265.9658 164.4746 266.0605 164.6387 c266.1567 164.8027 266.2046 164.9746 266.2046 165.1582 c266.2046 165.3672 266.1348 165.5703 265.9937 165.7715 c265.7988 166.0469 265.4448 166.3789 264.9297 166.7676 c264.4106 167.1582 264.0889 167.4414 263.9619 167.6172 c263.7427 167.9102 263.6328 168.2266 263.6328 168.5664 c263.6328 168.8379 263.6968 169.084 263.8267 169.3066 c263.9556 169.5293 264.1387 169.7031 264.3735 169.832 c264.6089 169.9609 264.8647 170.0234 265.1406 170.0234 c265.4326 170.0234 265.7065 169.9512 265.9619 169.8066 c266.2168 169.6621 266.4858 169.3945 266.7705 169.0078 C266.2637 168.6211 l266.0298 168.9316 265.8306 169.1367 265.6665 169.2344 c265.502 169.334 265.3218 169.3828 265.1279 169.3828 c264.877 169.3828 264.6719 169.3066 264.5127 169.1543 c264.3535 169.002 264.2749 168.8145 264.2749 168.5918 c264.2749 168.457 264.3027 168.3262 264.3589 168.1992 c264.4146 168.0723 264.5176 167.9355 264.6665 167.7852 c264.7485 167.707 265.0166 167.5 265.4697 167.1641 c266.0078 166.7676 266.377 166.4141 266.5767 166.1055 c266.7759 165.7949 266.8755 165.4844 266.8755 165.1719 c266.8755 164.7207 266.7056 164.3281 266.3638 163.9961 c266.0205 163.6641 265.6045 163.498 265.1147 163.498 c264.7378 163.498 264.3955 163.5996 264.0889 163.8008 c263.7817 164.002 263.4985 164.3398 263.2397 164.8125 CF268.2114 169.8672 m268.8325 169.8672 L268.8325 166.1172 l268.8325 165.6719 268.8403 165.3945 268.8574 165.2852 c268.8887 165.041 268.9604 164.8359 269.0732 164.6719 c269.1855 164.5059 269.3584 164.3672 269.5923 164.2559 c269.8262 164.1445 270.0615 164.0898 270.2983 164.0898 c270.5034 164.0898 270.7002 164.1348 270.8896 164.2207 c271.0786 164.3086 271.2354 164.4297 271.3623 164.584 c271.4893 164.7383 271.5825 164.9258 271.6416 165.1445 c271.6836 165.3027 271.7046 165.627 271.7046 166.1172 C271.7046 169.8672 L272.3252 169.8672 L272.3252 166.1172 l272.3252 165.5625 272.2715 165.1133 272.1626 164.7715 c272.0542 164.4297 271.8374 164.1328 271.5122 163.8789 c271.1875 163.625 270.7935 163.498 270.3315 163.498 c269.8306 163.498 269.4014 163.6172 269.0435 163.8574 c268.6865 164.0977 268.4463 164.4141 268.3252 164.8086 c268.2495 165.0508 268.2114 165.4863 268.2114 166.1172 c268.2114 169.8672 Lf273.2124 164.8125 m273.7402 165.1289 l274.1123 164.4453 274.5415 164.1035 275.0283 164.1035 c275.2373 164.1035 275.4326 164.1504 275.6152 164.248 c275.7983 164.3457 275.9385 164.4746 276.0332 164.6387 c276.1294 164.8027 276.1772 164.9746 276.1772 165.1582 c276.1772 165.3672 276.1074 165.5703 275.9663 165.7715 c275.7715 166.0469 275.4175 166.3789 274.9023 166.7676 c274.3833 167.1582 274.0615 167.4414 273.9346 167.6172 c273.7153 167.9102 273.6055 168.2266 273.6055 168.5664 c273.6055 168.8379 273.6694 169.084 273.7993 169.3066 c273.9282 169.5293 274.1113 169.7031 274.3467 169.832 c274.5815 169.9609 274.8364 170.0234 275.1133 170.0234 c275.4053 170.0234 275.6797 169.9512 275.9346 169.8066 c276.1895 169.6621 276.4585 169.3945 276.7437 169.0078 C276.2363 168.6211 l276.0024 168.9316 275.8032 169.1367 275.6396 169.2344 c275.4746 169.334 275.2944 169.3828 275.1006 169.3828 c274.8496 169.3828 274.6445 169.3066 274.4854 169.1543 c274.3267 169.002 274.2476 168.8145 274.2476 168.5918 c274.2476 168.457 274.2754 168.3262 274.3315 168.1992 c274.3872 168.0723 274.4902 167.9355 274.6406 167.7852 c274.7217 167.707 274.9893 167.5 275.4424 167.1641 c275.9805 166.7676 276.3496 166.4141 276.5493 166.1055 c276.7485 165.7949 276.8486 165.4844 276.8486 165.1719 c276.8486 164.7207 276.6782 164.3281 276.3364 163.9961 c275.9937 163.6641 275.5776 163.498 275.0874 163.498 c274.7104 163.498 274.3687 163.5996 274.0615 163.8008 c273.7544 164.002 273.4717 164.3398 273.2124 164.8125 CFU277.5459 169.2598 m277.5459 169.8672 L280.9497 169.8672 L280.9497 169.2598 L279.5649 169.2598 L279.5649 163.6543 L278.9321 163.6543 L278.9321 169.2598 l277.5459 169.2598 Lf*u1 D283.6055 168.5488 m282.5405 166.2988 L284.6636 166.2988 l283.6055 168.5488 Lf0 D283.6836 169.8672 m286.5815 163.6543 L285.9106 163.6543 L284.9326 165.6992 L282.2559 165.6992 L281.2886 163.6543 L280.5957 163.6543 L283.5317 169.8672 l283.6836 169.8672 Lf*U287.4546 163.6543 m288.0757 163.6543 L288.0757 169.8691 L287.4546 169.8691 l287.4546 163.6543 Lf289.5039 163.6543 m289.5039 169.8672 L289.6387 169.8672 L293.7739 165.1055 L293.7739 169.8672 L294.3867 169.8672 L294.3867 163.6543 L294.2461 163.6543 L290.147 168.3594 L290.147 163.6543 l289.5039 163.6543 Lf*u1 D298.3594 168.5488 m297.2935 166.2988 L299.4175 166.2988 l298.3594 168.5488 Lf0 D298.4375 169.8672 m301.3345 163.6543 L300.6646 163.6543 L299.6875 165.6992 L297.0098 165.6992 L296.0415 163.6543 L295.3496 163.6543 L298.2856 169.8672 l298.4375 169.8672 Lf*Uu*u1 D302.9233 166.6445 m302.9233 164.2637 L303.6924 164.2637 l304.1484 164.2637 304.4805 164.3066 304.6914 164.3965 c304.9043 164.4844 305.0723 164.623 305.2012 164.8125 c305.3306 165.002 305.3945 165.2051 305.3945 165.4238 c305.3945 165.6992 305.3022 165.9414 305.1235 166.1465 c304.9434 166.3516 304.6953 166.4922 304.3784 166.5684 c304.1685 166.6211 303.7983 166.6445 303.2744 166.6445 c302.9233 166.6445 Lf302.9233 169.2598 m302.9233 167.2695 L303.2783 167.2695 l303.7104 167.2695 304.0273 167.3105 304.2305 167.3906 c304.4355 167.4707 304.5933 167.5977 304.7124 167.7715 c304.8325 167.9434 304.8926 168.1367 304.8926 168.3477 c304.8926 168.6328 304.7915 168.8555 304.5913 169.0176 c304.3945 169.1797 304.0762 169.2598 303.6426 169.2598 c302.9233 169.2598 Lf0 D302.3145 169.8672 m303.5396 169.8672 l304.0332 169.8672 304.4106 169.8086 304.6753 169.6934 c304.9414 169.5762 305.1504 169.3965 305.3022 169.1543 c305.457 168.9121 305.5332 168.6426 305.5332 168.3477 c305.5332 168.0703 305.4648 167.8203 305.3325 167.5938 c305.1973 167.3672 305.0005 167.1836 304.7383 167.043 c305.0625 166.9316 305.3105 166.8047 305.4844 166.6563 c305.6582 166.5078 305.793 166.3301 305.8906 166.1191 c305.9883 165.9102 306.0352 165.6816 306.0352 165.4375 c306.0352 164.9395 305.8535 164.5176 305.4883 164.1719 c305.1255 163.8262 304.6343 163.6543 304.0215 163.6543 C302.3145 163.6543 l302.3145 169.8672 Lf*UU307.2656 169.8672 m307.8867 169.8672 L307.8867 164.2559 L310.2773 164.2559 L310.2773 163.6543 L307.2656 163.6543 l307.2656 169.8672 Lf311.2656 169.8672 m314.8262 169.8672 L314.8262 169.2598 L311.8867 169.2598 L311.8867 167.3125 L314.8008 167.3125 L314.8008 166.7051 L311.8867 166.7051 L311.8867 164.2637 L314.8008 164.2637 L314.8008 163.6543 L311.2656 163.6543 l311.2656 169.8672 Lf319.0371 163.6543 m319.9277 169.8672 L320.0273 169.8672 L322.5527 164.7695 L325.0547 169.8672 L325.1543 169.8672 L326.0488 163.6543 L325.4395 163.6543 L324.8262 168.0996 L322.6289 163.6543 L322.4707 163.6543 L320.248 168.1309 L319.6367 163.6543 l319.0371 163.6543 Lf*u1 D329.7305 168.5488 m328.6641 166.2988 L330.7891 166.2988 l329.7305 168.5488 Lf0 D329.8086 169.8672 m332.7051 163.6543 L332.0352 163.6543 L331.0586 165.6992 L328.3809 165.6992 L327.4131 163.6543 L326.7188 163.6543 L329.6563 169.8672 l329.8086 169.8672 Lf*U333.6738 163.6543 m333.6738 169.8672 L333.8086 169.8672 L337.9434 165.1055 L337.9434 169.8672 L338.5547 169.8672 L338.5547 163.6543 L338.416 163.6543 L334.3145 168.3594 L334.3145 163.6543 l333.6738 163.6543 Lf*u1 D342.5273 168.5488 m341.4629 166.2988 L343.5879 166.2988 l342.5273 168.5488 Lf0 D342.6055 169.8672 m345.5039 163.6543 L344.832 163.6543 L343.8555 165.6992 L341.1797 165.6992 L340.2109 163.6543 L339.5176 163.6543 L342.4531 169.8672 l342.6055 169.8672 Lf*Uu352.459 168.8242 m351.9785 168.3691 l351.6309 168.709 351.252 168.9668 350.8398 169.1445 c350.4277 169.3203 350.0254 169.4082 349.6328 169.4082 c349.1484 169.4082 348.6836 169.2871 348.2422 169.0488 c347.8027 168.8086 347.459 168.4844 347.2188 168.0742 c346.9766 167.666 346.8555 167.2324 346.8555 166.7754 c346.8555 166.3086 346.9805 165.8652 347.2305 165.4434 c347.4824 165.0234 347.8281 164.6914 348.2715 164.4512 c348.7109 164.2109 349.1953 164.0898 349.7246 164.0898 c350.3633 164.0898 350.9023 164.2695 351.3438 164.6309 c351.7871 164.9902 352.0488 165.459 352.1309 166.0332 C350.1504 166.0332 L350.1504 166.6328 L352.8281 166.6328 l352.8223 165.6719 352.5371 164.9102 351.9727 164.3447 c351.4082 163.7813 350.6523 163.498 349.707 163.498 c348.5586 163.498 347.6484 163.8906 346.9785 164.6719 c346.4609 165.2754 346.2051 165.9727 346.2051 166.7637 c346.2051 167.3516 346.3535 167.9004 346.6484 168.4063 c346.9453 168.9141 347.3496 169.3105 347.8652 169.5947 c348.3809 169.8809 348.9629 170.0234 349.6133 170.0234 c350.1406 170.0234 350.6348 169.9297 351.1016 169.7402 c351.5645 169.5488 352.0195 169.2441 352.459 168.8242 CFU354.0156 169.8672 m357.5742 169.8672 L357.5742 169.2598 L354.6348 169.2598 L354.6348 167.3125 L357.5508 167.3125 L357.5508 166.7051 L354.6348 166.7051 L354.6348 164.2637 L357.5508 164.2637 L357.5508 163.6543 L354.0156 163.6543 l354.0156 169.8672 Lf358.3652 163.6543 m359.2559 169.8672 L359.3555 169.8672 L361.8809 164.7695 L364.3828 169.8672 L364.4824 169.8672 L365.3789 163.6543 L364.7676 163.6543 L364.1543 168.0996 L361.957 163.6543 L361.7988 163.6543 L359.5742 168.1309 L358.9648 163.6543 l358.3652 163.6543 Lf366.6016 169.8672 m370.1621 169.8672 L370.1621 169.2598 L367.2227 169.2598 L367.2227 167.3125 L370.1387 167.3125 L370.1387 166.7051 L367.2227 166.7051 L367.2227 164.2637 L370.1387 164.2637 L370.1387 163.6543 L366.6016 163.6543 l366.6016 169.8672 Lf371.2402 163.6543 m371.2402 169.8672 L371.375 169.8672 L375.5098 165.1055 L375.5098 169.8672 L376.123 169.8672 L376.123 163.6543 L375.9844 163.6543 L371.8828 168.3594 L371.8828 163.6543 l371.2402 163.6543 Lf377.0176 169.2598 m377.0176 169.8672 L380.4219 169.8672 L380.4219 169.2598 L379.0371 169.2598 L379.0371 163.6543 L378.4043 163.6543 L378.4043 169.2598 l377.0176 169.2598 LfLB%AI5_EndLayer--%AI3_BeginCropsuserdict /AI3_noCropMarks known not {0 Auu0 R1 1 1 1 ([Registration]) 0 XS0 J 0 j 0.5 w 4 M []0 d0 XR-9 0 m-36 0 LS0 -9 m0 -36 LSUu-9 480 m-36 480 LS0 489 m0 516 LSUu649 480 m676 480 LS640 489 m640 516 LSUu649 0 m676 0 LS640 -9 m640 -36 LSUU} if%AI3_EndCrops%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF